/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface ClaimsInterface extends ethers.utils.Interface {
  functions: {
    'applyDeltas(((uint128,uint128),uint160,uint128,uint32,uint32,uint32,int24,uint16,uint16,uint8),((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint128),uint256,uint256,((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint32),uint160,uint160,uint160,uint160,bool,bool,bool),(address,address,uint128,int24,int24,int24,bool))': FunctionFragment;
    'getDeltas(((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint128),uint256,uint256,((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint32),uint160,uint160,uint160,uint160,bool,bool,bool),(address,address,uint128,int24,int24,int24,bool))': FunctionFragment;
    'section1(((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint128),uint256,uint256,((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint32),uint160,uint160,uint160,uint160,bool,bool,bool),(address,address,uint128,int24,int24,int24,bool),(ITwapSource,(uint160,uint160),address,address,address,uint256,uint32,int16,int16,uint16,uint16,uint16,uint8,uint8,bool))': FunctionFragment;
    'section2(((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint128),uint256,uint256,((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint32),uint160,uint160,uint160,uint160,bool,bool,bool),(address,address,uint128,int24,int24,int24,bool))': FunctionFragment;
    'section3(((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint128),uint256,uint256,((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint32),uint160,uint160,uint160,uint160,bool,bool,bool),(address,address,uint128,int24,int24,int24,bool),(uint160,uint128,uint128,uint128,uint128))': FunctionFragment;
    'section4(((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint128),uint256,uint256,((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint32),uint160,uint160,uint160,uint160,bool,bool,bool),(address,address,uint128,int24,int24,int24,bool),(uint160,uint128,uint128,uint128,uint128))': FunctionFragment;
    'section5(((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint128),uint256,uint256,((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint32),uint160,uint160,uint160,uint160,bool,bool,bool),(address,address,uint128,int24,int24,int24,bool))': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'applyDeltas',
    values: [
      {
        protocolFees: { token0: BigNumberish; token1: BigNumberish };
        latestPrice: BigNumberish;
        liquidityGlobal: BigNumberish;
        lastTime: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        latestTick: BigNumberish;
        syncFee: BigNumberish;
        fillFee: BigNumberish;
        unlocked: BigNumberish;
      },
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'getDeltas',
    values: [
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'section1',
    values: [
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      {
        source: string;
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        inputPool: string;
        minAmountPerAuction: BigNumberish;
        genesisTime: BigNumberish;
        minPositionWidth: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        blockTime: BigNumberish;
        token0Decimals: BigNumberish;
        token1Decimals: BigNumberish;
        minAmountLowerPriced: boolean;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'section2',
    values: [
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'section3',
    values: [
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'section4',
    values: [
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'section5',
    values: [
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'applyDeltas',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'getDeltas', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'section1', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'section2', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'section3', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'section4', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'section5', data: BytesLike): Result;

  events: {};
}

export class Claims extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ClaimsInterface;

  functions: {
    applyDeltas(
      state: {
        protocolFees: { token0: BigNumberish; token1: BigNumberish };
        latestPrice: BigNumberish;
        liquidityGlobal: BigNumberish;
        lastTime: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        latestTick: BigNumberish;
        syncFee: BigNumberish;
        fillFee: BigNumberish;
        unlocked: BigNumberish;
      },
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          },
          BigNumber,
          BigNumber,
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          };
          amountInFilledMax: BigNumber;
          amountOutUnfilledMax: BigNumber;
          claimTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          finalTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          };
          priceLower: BigNumber;
          priceClaim: BigNumber;
          priceUpper: BigNumber;
          priceSpread: BigNumber;
          earlyReturn: boolean;
          removeLower: boolean;
          removeUpper: boolean;
        },
      ]
    >;

    getDeltas(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          },
          BigNumber,
          BigNumber,
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          };
          amountInFilledMax: BigNumber;
          amountOutUnfilledMax: BigNumber;
          claimTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          finalTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          };
          priceLower: BigNumber;
          priceClaim: BigNumber;
          priceUpper: BigNumber;
          priceSpread: BigNumber;
          earlyReturn: boolean;
          removeLower: boolean;
          removeUpper: boolean;
        },
      ]
    >;

    section1(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      constants: {
        source: string;
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        inputPool: string;
        minAmountPerAuction: BigNumberish;
        genesisTime: BigNumberish;
        minPositionWidth: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        blockTime: BigNumberish;
        token0Decimals: BigNumberish;
        token1Decimals: BigNumberish;
        minAmountLowerPriced: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          },
          BigNumber,
          BigNumber,
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          };
          amountInFilledMax: BigNumber;
          amountOutUnfilledMax: BigNumber;
          claimTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          finalTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          };
          priceLower: BigNumber;
          priceClaim: BigNumber;
          priceUpper: BigNumber;
          priceSpread: BigNumber;
          earlyReturn: boolean;
          removeLower: boolean;
          removeUpper: boolean;
        },
      ]
    >;

    section2(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          },
          BigNumber,
          BigNumber,
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          };
          amountInFilledMax: BigNumber;
          amountOutUnfilledMax: BigNumber;
          claimTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          finalTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          };
          priceLower: BigNumber;
          priceClaim: BigNumber;
          priceUpper: BigNumber;
          priceSpread: BigNumber;
          earlyReturn: boolean;
          removeLower: boolean;
          removeUpper: boolean;
        },
      ]
    >;

    section3(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          },
          BigNumber,
          BigNumber,
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          };
          amountInFilledMax: BigNumber;
          amountOutUnfilledMax: BigNumber;
          claimTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          finalTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          };
          priceLower: BigNumber;
          priceClaim: BigNumber;
          priceUpper: BigNumber;
          priceSpread: BigNumber;
          earlyReturn: boolean;
          removeLower: boolean;
          removeUpper: boolean;
        },
      ]
    >;

    section4(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          },
          BigNumber,
          BigNumber,
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          };
          amountInFilledMax: BigNumber;
          amountOutUnfilledMax: BigNumber;
          claimTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          finalTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          };
          priceLower: BigNumber;
          priceClaim: BigNumber;
          priceUpper: BigNumber;
          priceSpread: BigNumber;
          earlyReturn: boolean;
          removeLower: boolean;
          removeUpper: boolean;
        },
      ]
    >;

    section5(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          },
          BigNumber,
          BigNumber,
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          boolean,
          boolean,
          boolean,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          };
          amountInFilledMax: BigNumber;
          amountOutUnfilledMax: BigNumber;
          claimTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          finalTick: [
            [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            },
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
            BigNumber,
          ] & {
            deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
              amountInDelta: BigNumber;
              amountOutDelta: BigNumber;
              amountInDeltaMax: BigNumber;
              amountOutDeltaMax: BigNumber;
            };
            liquidityDelta: BigNumber;
            amountInDeltaMaxMinus: BigNumber;
            amountOutDeltaMaxMinus: BigNumber;
            amountInDeltaMaxStashed: BigNumber;
            amountOutDeltaMaxStashed: BigNumber;
          };
          position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
            claimPriceLast: BigNumber;
            liquidity: BigNumber;
            amountIn: BigNumber;
            amountOut: BigNumber;
            accumEpochLast: number;
          };
          priceLower: BigNumber;
          priceClaim: BigNumber;
          priceUpper: BigNumber;
          priceSpread: BigNumber;
          earlyReturn: boolean;
          removeLower: boolean;
          removeUpper: boolean;
        },
      ]
    >;
  };

  applyDeltas(
    state: {
      protocolFees: { token0: BigNumberish; token1: BigNumberish };
      latestPrice: BigNumberish;
      liquidityGlobal: BigNumberish;
      lastTime: BigNumberish;
      auctionStart: BigNumberish;
      accumEpoch: BigNumberish;
      latestTick: BigNumberish;
      syncFee: BigNumberish;
      fillFee: BigNumberish;
      unlocked: BigNumberish;
    },
    cache: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      finalDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      };
      amountInFilledMax: BigNumberish;
      amountOutUnfilledMax: BigNumberish;
      claimTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      finalTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      position: {
        claimPriceLast: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        accumEpochLast: BigNumberish;
      };
      priceLower: BigNumberish;
      priceClaim: BigNumberish;
      priceUpper: BigNumberish;
      priceSpread: BigNumberish;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    },
    params: {
      owner: string;
      to: string;
      amount: BigNumberish;
      lower: BigNumberish;
      upper: BigNumberish;
      claim: BigNumberish;
      zeroForOne: boolean;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      },
      BigNumber,
      BigNumber,
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
    ] & {
      deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      };
      amountInFilledMax: BigNumber;
      amountOutUnfilledMax: BigNumber;
      claimTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      finalTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      };
      priceLower: BigNumber;
      priceClaim: BigNumber;
      priceUpper: BigNumber;
      priceSpread: BigNumber;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    }
  >;

  getDeltas(
    cache: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      finalDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      };
      amountInFilledMax: BigNumberish;
      amountOutUnfilledMax: BigNumberish;
      claimTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      finalTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      position: {
        claimPriceLast: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        accumEpochLast: BigNumberish;
      };
      priceLower: BigNumberish;
      priceClaim: BigNumberish;
      priceUpper: BigNumberish;
      priceSpread: BigNumberish;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    },
    params: {
      owner: string;
      to: string;
      amount: BigNumberish;
      lower: BigNumberish;
      upper: BigNumberish;
      claim: BigNumberish;
      zeroForOne: boolean;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      },
      BigNumber,
      BigNumber,
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
    ] & {
      deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      };
      amountInFilledMax: BigNumber;
      amountOutUnfilledMax: BigNumber;
      claimTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      finalTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      };
      priceLower: BigNumber;
      priceClaim: BigNumber;
      priceUpper: BigNumber;
      priceSpread: BigNumber;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    }
  >;

  section1(
    cache: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      finalDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      };
      amountInFilledMax: BigNumberish;
      amountOutUnfilledMax: BigNumberish;
      claimTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      finalTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      position: {
        claimPriceLast: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        accumEpochLast: BigNumberish;
      };
      priceLower: BigNumberish;
      priceClaim: BigNumberish;
      priceUpper: BigNumberish;
      priceSpread: BigNumberish;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    },
    params: {
      owner: string;
      to: string;
      amount: BigNumberish;
      lower: BigNumberish;
      upper: BigNumberish;
      claim: BigNumberish;
      zeroForOne: boolean;
    },
    constants: {
      source: string;
      bounds: { min: BigNumberish; max: BigNumberish };
      token0: string;
      token1: string;
      inputPool: string;
      minAmountPerAuction: BigNumberish;
      genesisTime: BigNumberish;
      minPositionWidth: BigNumberish;
      tickSpread: BigNumberish;
      twapLength: BigNumberish;
      auctionLength: BigNumberish;
      blockTime: BigNumberish;
      token0Decimals: BigNumberish;
      token1Decimals: BigNumberish;
      minAmountLowerPriced: boolean;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      },
      BigNumber,
      BigNumber,
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
    ] & {
      deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      };
      amountInFilledMax: BigNumber;
      amountOutUnfilledMax: BigNumber;
      claimTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      finalTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      };
      priceLower: BigNumber;
      priceClaim: BigNumber;
      priceUpper: BigNumber;
      priceSpread: BigNumber;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    }
  >;

  section2(
    cache: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      finalDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      };
      amountInFilledMax: BigNumberish;
      amountOutUnfilledMax: BigNumberish;
      claimTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      finalTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      position: {
        claimPriceLast: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        accumEpochLast: BigNumberish;
      };
      priceLower: BigNumberish;
      priceClaim: BigNumberish;
      priceUpper: BigNumberish;
      priceSpread: BigNumberish;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    },
    params: {
      owner: string;
      to: string;
      amount: BigNumberish;
      lower: BigNumberish;
      upper: BigNumberish;
      claim: BigNumberish;
      zeroForOne: boolean;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      },
      BigNumber,
      BigNumber,
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
    ] & {
      deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      };
      amountInFilledMax: BigNumber;
      amountOutUnfilledMax: BigNumber;
      claimTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      finalTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      };
      priceLower: BigNumber;
      priceClaim: BigNumber;
      priceUpper: BigNumber;
      priceSpread: BigNumber;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    }
  >;

  section3(
    cache: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      finalDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      };
      amountInFilledMax: BigNumberish;
      amountOutUnfilledMax: BigNumberish;
      claimTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      finalTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      position: {
        claimPriceLast: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        accumEpochLast: BigNumberish;
      };
      priceLower: BigNumberish;
      priceClaim: BigNumberish;
      priceUpper: BigNumberish;
      priceSpread: BigNumberish;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    },
    params: {
      owner: string;
      to: string;
      amount: BigNumberish;
      lower: BigNumberish;
      upper: BigNumberish;
      claim: BigNumberish;
      zeroForOne: boolean;
    },
    pool: {
      price: BigNumberish;
      liquidity: BigNumberish;
      amountInDelta: BigNumberish;
      amountInDeltaMaxClaimed: BigNumberish;
      amountOutDeltaMaxClaimed: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      },
      BigNumber,
      BigNumber,
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
    ] & {
      deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      };
      amountInFilledMax: BigNumber;
      amountOutUnfilledMax: BigNumber;
      claimTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      finalTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      };
      priceLower: BigNumber;
      priceClaim: BigNumber;
      priceUpper: BigNumber;
      priceSpread: BigNumber;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    }
  >;

  section4(
    cache: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      finalDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      };
      amountInFilledMax: BigNumberish;
      amountOutUnfilledMax: BigNumberish;
      claimTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      finalTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      position: {
        claimPriceLast: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        accumEpochLast: BigNumberish;
      };
      priceLower: BigNumberish;
      priceClaim: BigNumberish;
      priceUpper: BigNumberish;
      priceSpread: BigNumberish;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    },
    params: {
      owner: string;
      to: string;
      amount: BigNumberish;
      lower: BigNumberish;
      upper: BigNumberish;
      claim: BigNumberish;
      zeroForOne: boolean;
    },
    pool: {
      price: BigNumberish;
      liquidity: BigNumberish;
      amountInDelta: BigNumberish;
      amountInDeltaMaxClaimed: BigNumberish;
      amountOutDeltaMaxClaimed: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      },
      BigNumber,
      BigNumber,
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
    ] & {
      deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      };
      amountInFilledMax: BigNumber;
      amountOutUnfilledMax: BigNumber;
      claimTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      finalTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      };
      priceLower: BigNumber;
      priceClaim: BigNumber;
      priceUpper: BigNumber;
      priceSpread: BigNumber;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    }
  >;

  section5(
    cache: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      finalDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      };
      amountInFilledMax: BigNumberish;
      amountOutUnfilledMax: BigNumberish;
      claimTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      finalTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      position: {
        claimPriceLast: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        accumEpochLast: BigNumberish;
      };
      priceLower: BigNumberish;
      priceClaim: BigNumberish;
      priceUpper: BigNumberish;
      priceSpread: BigNumberish;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    },
    params: {
      owner: string;
      to: string;
      amount: BigNumberish;
      lower: BigNumberish;
      upper: BigNumberish;
      claim: BigNumberish;
      zeroForOne: boolean;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      },
      BigNumber,
      BigNumber,
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean,
      boolean,
      boolean,
    ] & {
      deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      };
      amountInFilledMax: BigNumber;
      amountOutUnfilledMax: BigNumber;
      claimTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      finalTick: [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      };
      position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
        claimPriceLast: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        amountOut: BigNumber;
        accumEpochLast: number;
      };
      priceLower: BigNumber;
      priceClaim: BigNumber;
      priceUpper: BigNumber;
      priceSpread: BigNumber;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    }
  >;

  callStatic: {
    applyDeltas(
      state: {
        protocolFees: { token0: BigNumberish; token1: BigNumberish };
        latestPrice: BigNumberish;
        liquidityGlobal: BigNumberish;
        lastTime: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        latestTick: BigNumberish;
        syncFee: BigNumberish;
        fillFee: BigNumberish;
        unlocked: BigNumberish;
      },
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        },
        BigNumber,
        BigNumber,
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        };
        amountInFilledMax: BigNumber;
        amountOutUnfilledMax: BigNumber;
        claimTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        finalTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        };
        priceLower: BigNumber;
        priceClaim: BigNumber;
        priceUpper: BigNumber;
        priceSpread: BigNumber;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      }
    >;

    getDeltas(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        },
        BigNumber,
        BigNumber,
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        };
        amountInFilledMax: BigNumber;
        amountOutUnfilledMax: BigNumber;
        claimTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        finalTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        };
        priceLower: BigNumber;
        priceClaim: BigNumber;
        priceUpper: BigNumber;
        priceSpread: BigNumber;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      }
    >;

    section1(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      constants: {
        source: string;
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        inputPool: string;
        minAmountPerAuction: BigNumberish;
        genesisTime: BigNumberish;
        minPositionWidth: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        blockTime: BigNumberish;
        token0Decimals: BigNumberish;
        token1Decimals: BigNumberish;
        minAmountLowerPriced: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        },
        BigNumber,
        BigNumber,
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        };
        amountInFilledMax: BigNumber;
        amountOutUnfilledMax: BigNumber;
        claimTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        finalTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        };
        priceLower: BigNumber;
        priceClaim: BigNumber;
        priceUpper: BigNumber;
        priceSpread: BigNumber;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      }
    >;

    section2(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        },
        BigNumber,
        BigNumber,
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        };
        amountInFilledMax: BigNumber;
        amountOutUnfilledMax: BigNumber;
        claimTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        finalTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        };
        priceLower: BigNumber;
        priceClaim: BigNumber;
        priceUpper: BigNumber;
        priceSpread: BigNumber;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      }
    >;

    section3(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        },
        BigNumber,
        BigNumber,
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        };
        amountInFilledMax: BigNumber;
        amountOutUnfilledMax: BigNumber;
        claimTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        finalTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        };
        priceLower: BigNumber;
        priceClaim: BigNumber;
        priceUpper: BigNumber;
        priceSpread: BigNumber;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      }
    >;

    section4(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        },
        BigNumber,
        BigNumber,
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        };
        amountInFilledMax: BigNumber;
        amountOutUnfilledMax: BigNumber;
        claimTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        finalTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        };
        priceLower: BigNumber;
        priceClaim: BigNumber;
        priceUpper: BigNumber;
        priceSpread: BigNumber;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      }
    >;

    section5(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        },
        BigNumber,
        BigNumber,
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean,
        boolean,
        boolean,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        finalDeltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        pool: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        };
        amountInFilledMax: BigNumber;
        amountOutUnfilledMax: BigNumber;
        claimTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        finalTick: [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        };
        position: [BigNumber, BigNumber, BigNumber, BigNumber, number] & {
          claimPriceLast: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          amountOut: BigNumber;
          accumEpochLast: number;
        };
        priceLower: BigNumber;
        priceClaim: BigNumber;
        priceUpper: BigNumber;
        priceSpread: BigNumber;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    applyDeltas(
      state: {
        protocolFees: { token0: BigNumberish; token1: BigNumberish };
        latestPrice: BigNumberish;
        liquidityGlobal: BigNumberish;
        lastTime: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        latestTick: BigNumberish;
        syncFee: BigNumberish;
        fillFee: BigNumberish;
        unlocked: BigNumberish;
      },
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getDeltas(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    section1(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      constants: {
        source: string;
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        inputPool: string;
        minAmountPerAuction: BigNumberish;
        genesisTime: BigNumberish;
        minPositionWidth: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        blockTime: BigNumberish;
        token0Decimals: BigNumberish;
        token1Decimals: BigNumberish;
        minAmountLowerPriced: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    section2(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    section3(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    section4(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    section5(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    applyDeltas(
      state: {
        protocolFees: { token0: BigNumberish; token1: BigNumberish };
        latestPrice: BigNumberish;
        liquidityGlobal: BigNumberish;
        lastTime: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        latestTick: BigNumberish;
        syncFee: BigNumberish;
        fillFee: BigNumberish;
        unlocked: BigNumberish;
      },
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getDeltas(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    section1(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      constants: {
        source: string;
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        inputPool: string;
        minAmountPerAuction: BigNumberish;
        genesisTime: BigNumberish;
        minPositionWidth: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        blockTime: BigNumberish;
        token0Decimals: BigNumberish;
        token1Decimals: BigNumberish;
        minAmountLowerPriced: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    section2(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    section3(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    section4(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    section5(
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
