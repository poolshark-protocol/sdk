/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface DeltasInterface extends ethers.utils.Interface {
  functions: {
    'burnMaxCache((uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128))': FunctionFragment;
    'burnMaxMinus(((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128))': FunctionFragment;
    'burnMaxPool((uint160,uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint128),uint256,uint256,((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint32),uint160,uint160,uint160,uint160,bool,bool,bool),(address,address,uint128,int24,int24,int24,bool))': FunctionFragment;
    'from(((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128))': FunctionFragment;
    'max(uint128,uint160,uint160,bool)': FunctionFragment;
    'maxAuction(uint128,uint160,uint160,bool)': FunctionFragment;
    'maxRoundUp(uint128,uint160,uint160,bool)': FunctionFragment;
    'stash((uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128))': FunctionFragment;
    'to((uint128,uint128,uint128,uint128),((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128))': FunctionFragment;
    'transfer((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),uint256,uint256)': FunctionFragment;
    'transferMax((uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128),uint256,uint256)': FunctionFragment;
    'unstash(((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),(uint128,uint128,uint128,uint128))': FunctionFragment;
    'update(((uint128,uint128,uint128,uint128),int128,uint128,uint128,uint128,uint128),uint128,uint160,uint160,bool,bool)': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'burnMaxCache',
    values: [
      {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'burnMaxMinus',
    values: [
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'burnMaxPool',
    values: [
      {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'from',
    values: [
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'max',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'maxAuction',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'maxRoundUp',
    values: [BigNumberish, BigNumberish, BigNumberish, boolean],
  ): string;
  encodeFunctionData(
    functionFragment: 'stash',
    values: [
      {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'to',
    values: [
      {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'transfer',
    values: [
      {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferMax',
    values: [
      {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      BigNumberish,
      BigNumberish,
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'unstash',
    values: [
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
    ],
  ): string;
  encodeFunctionData(
    functionFragment: 'update',
    values: [
      {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      BigNumberish,
      BigNumberish,
      BigNumberish,
      boolean,
      boolean,
    ],
  ): string;

  decodeFunctionResult(
    functionFragment: 'burnMaxCache',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burnMaxMinus',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'burnMaxPool',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'from', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'max', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxAuction', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxRoundUp', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'stash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'to', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transfer', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'transferMax',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'unstash', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'update', data: BytesLike): Result;

  events: {};
}

export class Deltas extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: DeltasInterface;

  functions: {
    burnMaxCache(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      burnTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;

    burnMaxMinus(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      burnDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
      ]
    >;

    burnMaxPool(
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        },
      ]
    >;

    from(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;

    max(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      }
    >;

    maxAuction(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      }
    >;

    maxRoundUp(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      }
    >;

    stash(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
      ]
    >;

    to(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
      ]
    >;

    transfer(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      percentInTransfer: BigNumberish,
      percentOutTransfer: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;

    transferMax(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      percentInTransfer: BigNumberish,
      percentOutTransfer: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;

    unstash(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;

    update(
      tick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      amount: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      isPool0: boolean,
      isAdded: boolean,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;
  };

  burnMaxCache(
    fromDeltas: {
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaMax: BigNumberish;
      amountOutDeltaMax: BigNumberish;
    },
    burnTick: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      liquidityDelta: BigNumberish;
      amountInDeltaMaxMinus: BigNumberish;
      amountOutDeltaMaxMinus: BigNumberish;
      amountInDeltaMaxStashed: BigNumberish;
      amountOutDeltaMaxStashed: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      amountInDelta: BigNumber;
      amountOutDelta: BigNumber;
      amountInDeltaMax: BigNumber;
      amountOutDeltaMax: BigNumber;
    }
  >;

  burnMaxMinus(
    fromTick: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      liquidityDelta: BigNumberish;
      amountInDeltaMaxMinus: BigNumberish;
      amountOutDeltaMaxMinus: BigNumberish;
      amountInDeltaMaxStashed: BigNumberish;
      amountOutDeltaMaxStashed: BigNumberish;
    },
    burnDeltas: {
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaMax: BigNumberish;
      amountOutDeltaMax: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
    ] & {
      deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      };
      liquidityDelta: BigNumber;
      amountInDeltaMaxMinus: BigNumber;
      amountOutDeltaMaxMinus: BigNumber;
      amountInDeltaMaxStashed: BigNumber;
      amountOutDeltaMaxStashed: BigNumber;
    }
  >;

  burnMaxPool(
    pool: {
      price: BigNumberish;
      liquidity: BigNumberish;
      amountInDelta: BigNumberish;
      amountInDeltaMaxClaimed: BigNumberish;
      amountOutDeltaMaxClaimed: BigNumberish;
    },
    cache: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      finalDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      };
      amountInFilledMax: BigNumberish;
      amountOutUnfilledMax: BigNumberish;
      claimTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      finalTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      };
      position: {
        claimPriceLast: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        amountOut: BigNumberish;
        accumEpochLast: BigNumberish;
      };
      priceLower: BigNumberish;
      priceClaim: BigNumberish;
      priceUpper: BigNumberish;
      priceSpread: BigNumberish;
      earlyReturn: boolean;
      removeLower: boolean;
      removeUpper: boolean;
    },
    params: {
      owner: string;
      to: string;
      amount: BigNumberish;
      lower: BigNumberish;
      upper: BigNumberish;
      claim: BigNumberish;
      zeroForOne: boolean;
    },
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      price: BigNumber;
      liquidity: BigNumber;
      amountInDelta: BigNumber;
      amountInDeltaMaxClaimed: BigNumber;
      amountOutDeltaMaxClaimed: BigNumber;
    }
  >;

  from(
    fromTick: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      liquidityDelta: BigNumberish;
      amountInDeltaMaxMinus: BigNumberish;
      amountOutDeltaMaxMinus: BigNumberish;
      amountInDeltaMaxStashed: BigNumberish;
      amountOutDeltaMaxStashed: BigNumberish;
    },
    toDeltas: {
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaMax: BigNumberish;
      amountOutDeltaMax: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
    ]
  >;

  max(
    liquidity: BigNumberish,
    priceStart: BigNumberish,
    priceEnd: BigNumberish,
    isPool0: boolean,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      amountInDeltaMax: BigNumber;
      amountOutDeltaMax: BigNumber;
    }
  >;

  maxAuction(
    liquidity: BigNumberish,
    priceStart: BigNumberish,
    priceEnd: BigNumberish,
    isPool0: boolean,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      amountInDeltaMax: BigNumber;
      amountOutDeltaMax: BigNumber;
    }
  >;

  maxRoundUp(
    liquidity: BigNumberish,
    priceStart: BigNumberish,
    priceEnd: BigNumberish,
    isPool0: boolean,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, BigNumber] & {
      amountInDeltaMax: BigNumber;
      amountOutDeltaMax: BigNumber;
    }
  >;

  stash(
    fromDeltas: {
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaMax: BigNumberish;
      amountOutDeltaMax: BigNumberish;
    },
    toTick: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      liquidityDelta: BigNumberish;
      amountInDeltaMaxMinus: BigNumberish;
      amountOutDeltaMaxMinus: BigNumberish;
      amountInDeltaMaxStashed: BigNumberish;
      amountOutDeltaMaxStashed: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
    ]
  >;

  to(
    fromDeltas: {
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaMax: BigNumberish;
      amountOutDeltaMax: BigNumberish;
    },
    toTick: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      liquidityDelta: BigNumberish;
      amountInDeltaMaxMinus: BigNumberish;
      amountOutDeltaMaxMinus: BigNumberish;
      amountInDeltaMaxStashed: BigNumberish;
      amountOutDeltaMaxStashed: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
    ]
  >;

  transfer(
    fromDeltas: {
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaMax: BigNumberish;
      amountOutDeltaMax: BigNumberish;
    },
    toDeltas: {
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaMax: BigNumberish;
      amountOutDeltaMax: BigNumberish;
    },
    percentInTransfer: BigNumberish,
    percentOutTransfer: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
    ]
  >;

  transferMax(
    fromDeltas: {
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaMax: BigNumberish;
      amountOutDeltaMax: BigNumberish;
    },
    toDeltas: {
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaMax: BigNumberish;
      amountOutDeltaMax: BigNumberish;
    },
    percentInTransfer: BigNumberish,
    percentOutTransfer: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
    ]
  >;

  unstash(
    fromTick: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      liquidityDelta: BigNumberish;
      amountInDeltaMaxMinus: BigNumberish;
      amountOutDeltaMaxMinus: BigNumberish;
      amountInDeltaMaxStashed: BigNumberish;
      amountOutDeltaMaxStashed: BigNumberish;
    },
    toDeltas: {
      amountInDelta: BigNumberish;
      amountOutDelta: BigNumberish;
      amountInDeltaMax: BigNumberish;
      amountOutDeltaMax: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
    ]
  >;

  update(
    tick: {
      deltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      };
      liquidityDelta: BigNumberish;
      amountInDeltaMaxMinus: BigNumberish;
      amountOutDeltaMaxMinus: BigNumberish;
      amountInDeltaMaxStashed: BigNumberish;
      amountOutDeltaMaxStashed: BigNumberish;
    },
    amount: BigNumberish,
    priceLower: BigNumberish,
    priceUpper: BigNumberish,
    isPool0: boolean,
    isAdded: boolean,
    overrides?: CallOverrides,
  ): Promise<
    [
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      },
    ]
  >;

  callStatic: {
    burnMaxCache(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      burnTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        amountInDelta: BigNumber;
        amountOutDelta: BigNumber;
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      }
    >;

    burnMaxMinus(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      burnDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        };
        liquidityDelta: BigNumber;
        amountInDeltaMaxMinus: BigNumber;
        amountOutDeltaMaxMinus: BigNumber;
        amountInDeltaMaxStashed: BigNumber;
        amountOutDeltaMaxStashed: BigNumber;
      }
    >;

    burnMaxPool(
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      }
    >;

    from(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;

    max(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      }
    >;

    maxAuction(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      }
    >;

    maxRoundUp(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, BigNumber] & {
        amountInDeltaMax: BigNumber;
        amountOutDeltaMax: BigNumber;
      }
    >;

    stash(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
      ]
    >;

    to(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
      ]
    >;

    transfer(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      percentInTransfer: BigNumberish,
      percentOutTransfer: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;

    transferMax(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      percentInTransfer: BigNumberish,
      percentOutTransfer: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;

    unstash(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;

    update(
      tick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      amount: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      isPool0: boolean,
      isAdded: boolean,
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          deltas: [BigNumber, BigNumber, BigNumber, BigNumber] & {
            amountInDelta: BigNumber;
            amountOutDelta: BigNumber;
            amountInDeltaMax: BigNumber;
            amountOutDeltaMax: BigNumber;
          };
          liquidityDelta: BigNumber;
          amountInDeltaMaxMinus: BigNumber;
          amountOutDeltaMaxMinus: BigNumber;
          amountInDeltaMaxStashed: BigNumber;
          amountOutDeltaMaxStashed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          amountInDelta: BigNumber;
          amountOutDelta: BigNumber;
          amountInDeltaMax: BigNumber;
          amountOutDeltaMax: BigNumber;
        },
      ]
    >;
  };

  filters: {};

  estimateGas: {
    burnMaxCache(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      burnTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burnMaxMinus(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      burnDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    burnMaxPool(
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    from(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    max(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxAuction(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    maxRoundUp(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    stash(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    to(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transfer(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      percentInTransfer: BigNumberish,
      percentOutTransfer: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    transferMax(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      percentInTransfer: BigNumberish,
      percentOutTransfer: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    unstash(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    update(
      tick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      amount: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      isPool0: boolean,
      isAdded: boolean,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    burnMaxCache(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      burnTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burnMaxMinus(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      burnDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    burnMaxPool(
      pool: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      },
      cache: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        finalDeltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        pool: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        amountInFilledMax: BigNumberish;
        amountOutUnfilledMax: BigNumberish;
        claimTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        finalTick: {
          deltas: {
            amountInDelta: BigNumberish;
            amountOutDelta: BigNumberish;
            amountInDeltaMax: BigNumberish;
            amountOutDeltaMax: BigNumberish;
          };
          liquidityDelta: BigNumberish;
          amountInDeltaMaxMinus: BigNumberish;
          amountOutDeltaMaxMinus: BigNumberish;
          amountInDeltaMaxStashed: BigNumberish;
          amountOutDeltaMaxStashed: BigNumberish;
        };
        position: {
          claimPriceLast: BigNumberish;
          liquidity: BigNumberish;
          amountIn: BigNumberish;
          amountOut: BigNumberish;
          accumEpochLast: BigNumberish;
        };
        priceLower: BigNumberish;
        priceClaim: BigNumberish;
        priceUpper: BigNumberish;
        priceSpread: BigNumberish;
        earlyReturn: boolean;
        removeLower: boolean;
        removeUpper: boolean;
      },
      params: {
        owner: string;
        to: string;
        amount: BigNumberish;
        lower: BigNumberish;
        upper: BigNumberish;
        claim: BigNumberish;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    from(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    max(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxAuction(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    maxRoundUp(
      liquidity: BigNumberish,
      priceStart: BigNumberish,
      priceEnd: BigNumberish,
      isPool0: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    stash(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    to(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transfer(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      percentInTransfer: BigNumberish,
      percentOutTransfer: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    transferMax(
      fromDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      percentInTransfer: BigNumberish,
      percentOutTransfer: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    unstash(
      fromTick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      toDeltas: {
        amountInDelta: BigNumberish;
        amountOutDelta: BigNumberish;
        amountInDeltaMax: BigNumberish;
        amountOutDeltaMax: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    update(
      tick: {
        deltas: {
          amountInDelta: BigNumberish;
          amountOutDelta: BigNumberish;
          amountInDeltaMax: BigNumberish;
          amountOutDeltaMax: BigNumberish;
        };
        liquidityDelta: BigNumberish;
        amountInDeltaMaxMinus: BigNumberish;
        amountOutDeltaMaxMinus: BigNumberish;
        amountInDeltaMaxStashed: BigNumberish;
        amountOutDeltaMaxStashed: BigNumberish;
      },
      amount: BigNumberish,
      priceLower: BigNumberish,
      priceUpper: BigNumberish,
      isPool0: boolean,
      isAdded: boolean,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
