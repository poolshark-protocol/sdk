/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IRangePoolInterface extends ethers.utils.Interface {
  functions: {
    "increaseSampleLength(uint16)": FunctionFragment;
    "poolState()": FunctionFragment;
    "sample(uint32[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "increaseSampleLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "poolState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "sample",
    values: [BigNumberish[]]
  ): string;

  decodeFunctionResult(
    functionFragment: "increaseSampleLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "poolState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "sample", data: BytesLike): Result;

  events: {};
}

export class IRangePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IRangePoolInterface;

  functions: {
    increaseSampleLength(
      sampleLengthNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    poolState(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [number, number, number] & {
          index: number;
          length: number;
          lengthNext: number;
        },
        [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
      ]
    >;

    sample(
      secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber, BigNumber, number] & {
        tickSecondsAccum: BigNumber[];
        secondsPerLiquidityAccum: BigNumber[];
        averagePrice: BigNumber;
        averageLiquidity: BigNumber;
        averageTick: number;
      }
    >;
  };

  increaseSampleLength(
    sampleLengthNext: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  poolState(
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [number, number, number] & {
        index: number;
        length: number;
        lengthNext: number;
      },
      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
    ]
  >;

  sample(
    secondsAgo: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber, BigNumber, number] & {
      tickSecondsAccum: BigNumber[];
      secondsPerLiquidityAccum: BigNumber[];
      averagePrice: BigNumber;
      averageLiquidity: BigNumber;
      averageTick: number;
    }
  >;

  callStatic: {
    increaseSampleLength(
      sampleLengthNext: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    poolState(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [number, number, number] & {
          index: number;
          length: number;
          lengthNext: number;
        },
        [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
      ]
    >;

    sample(
      secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber, BigNumber, number] & {
        tickSecondsAccum: BigNumber[];
        secondsPerLiquidityAccum: BigNumber[];
        averagePrice: BigNumber;
        averageLiquidity: BigNumber;
        averageTick: number;
      }
    >;
  };

  filters: {};

  estimateGas: {
    increaseSampleLength(
      sampleLengthNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    poolState(overrides?: CallOverrides): Promise<BigNumber>;

    sample(
      secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    increaseSampleLength(
      sampleLengthNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    poolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sample(
      secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
