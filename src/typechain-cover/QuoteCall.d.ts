/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface QuoteCallInterface extends ethers.utils.Interface {
  functions: {
    'perform((uint160,uint128,bool),(((uint128,uint128),uint160,uint128,uint32,uint32,uint32,int24,uint16,uint16,uint8),(uint128,uint128),(ITwapSource,(uint160,uint160),address,address,address,uint256,uint32,int16,int16,uint16,uint16,uint16,uint8,uint8,bool),(uint160,uint128,uint128,uint128,uint128),(uint160,uint128,uint128,uint128,uint128),uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256,uint256))': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'perform',
    values: [
      { priceLimit: BigNumberish; amountIn: BigNumberish; zeroForOne: boolean },
      {
        state: {
          protocolFees: { token0: BigNumberish; token1: BigNumberish };
          latestPrice: BigNumberish;
          liquidityGlobal: BigNumberish;
          lastTime: BigNumberish;
          auctionStart: BigNumberish;
          accumEpoch: BigNumberish;
          latestTick: BigNumberish;
          syncFee: BigNumberish;
          fillFee: BigNumberish;
          unlocked: BigNumberish;
        };
        syncFees: { token0: BigNumberish; token1: BigNumberish };
        constants: {
          source: string;
          bounds: { min: BigNumberish; max: BigNumberish };
          token0: string;
          token1: string;
          inputPool: string;
          minAmountPerAuction: BigNumberish;
          genesisTime: BigNumberish;
          minPositionWidth: BigNumberish;
          tickSpread: BigNumberish;
          twapLength: BigNumberish;
          auctionLength: BigNumberish;
          blockTime: BigNumberish;
          token0Decimals: BigNumberish;
          token1Decimals: BigNumberish;
          minAmountLowerPriced: boolean;
        };
        pool0: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        pool1: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        price: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        input: BigNumberish;
        output: BigNumberish;
        inputBoosted: BigNumberish;
        auctionDepth: BigNumberish;
        auctionBoost: BigNumberish;
        amountInDelta: BigNumberish;
      },
    ],
  ): string;

  decodeFunctionResult(functionFragment: 'perform', data: BytesLike): Result;

  events: {};
}

export class QuoteCall extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: QuoteCallInterface;

  functions: {
    perform(
      params: {
        priceLimit: BigNumberish;
        amountIn: BigNumberish;
        zeroForOne: boolean;
      },
      cache: {
        state: {
          protocolFees: { token0: BigNumberish; token1: BigNumberish };
          latestPrice: BigNumberish;
          liquidityGlobal: BigNumberish;
          lastTime: BigNumberish;
          auctionStart: BigNumberish;
          accumEpoch: BigNumberish;
          latestTick: BigNumberish;
          syncFee: BigNumberish;
          fillFee: BigNumberish;
          unlocked: BigNumberish;
        };
        syncFees: { token0: BigNumberish; token1: BigNumberish };
        constants: {
          source: string;
          bounds: { min: BigNumberish; max: BigNumberish };
          token0: string;
          token1: string;
          inputPool: string;
          minAmountPerAuction: BigNumberish;
          genesisTime: BigNumberish;
          minPositionWidth: BigNumberish;
          tickSpread: BigNumberish;
          twapLength: BigNumberish;
          auctionLength: BigNumberish;
          blockTime: BigNumberish;
          token0Decimals: BigNumberish;
          token1Decimals: BigNumberish;
          minAmountLowerPriced: boolean;
        };
        pool0: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        pool1: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        price: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        input: BigNumberish;
        output: BigNumberish;
        inputBoosted: BigNumberish;
        auctionDepth: BigNumberish;
        auctionBoost: BigNumberish;
        amountInDelta: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [
            [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
            BigNumber,
            BigNumber,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
          ] & {
            protocolFees: [BigNumber, BigNumber] & {
              token0: BigNumber;
              token1: BigNumber;
            };
            latestPrice: BigNumber;
            liquidityGlobal: BigNumber;
            lastTime: number;
            auctionStart: number;
            accumEpoch: number;
            latestTick: number;
            syncFee: number;
            fillFee: number;
            unlocked: number;
          },
          [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
          [
            string,
            [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber },
            string,
            string,
            string,
            BigNumber,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            boolean,
          ] & {
            source: string;
            bounds: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
            token0: string;
            token1: string;
            inputPool: string;
            minAmountPerAuction: BigNumber;
            genesisTime: number;
            minPositionWidth: number;
            tickSpread: number;
            twapLength: number;
            auctionLength: number;
            blockTime: number;
            token0Decimals: number;
            token1Decimals: number;
            minAmountLowerPriced: boolean;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          },
          [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          },
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
          BigNumber,
        ] & {
          state: [
            [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
            BigNumber,
            BigNumber,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
          ] & {
            protocolFees: [BigNumber, BigNumber] & {
              token0: BigNumber;
              token1: BigNumber;
            };
            latestPrice: BigNumber;
            liquidityGlobal: BigNumber;
            lastTime: number;
            auctionStart: number;
            accumEpoch: number;
            latestTick: number;
            syncFee: number;
            fillFee: number;
            unlocked: number;
          };
          syncFees: [BigNumber, BigNumber] & {
            token0: BigNumber;
            token1: BigNumber;
          };
          constants: [
            string,
            [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber },
            string,
            string,
            string,
            BigNumber,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            number,
            boolean,
          ] & {
            source: string;
            bounds: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
            token0: string;
            token1: string;
            inputPool: string;
            minAmountPerAuction: BigNumber;
            genesisTime: number;
            minPositionWidth: number;
            tickSpread: number;
            twapLength: number;
            auctionLength: number;
            blockTime: number;
            token0Decimals: number;
            token1Decimals: number;
            minAmountLowerPriced: boolean;
          };
          pool0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          };
          pool1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
            price: BigNumber;
            liquidity: BigNumber;
            amountInDelta: BigNumber;
            amountInDeltaMaxClaimed: BigNumber;
            amountOutDeltaMaxClaimed: BigNumber;
          };
          price: BigNumber;
          liquidity: BigNumber;
          amountIn: BigNumber;
          input: BigNumber;
          output: BigNumber;
          inputBoosted: BigNumber;
          auctionDepth: BigNumber;
          auctionBoost: BigNumber;
          amountInDelta: BigNumber;
        },
      ]
    >;
  };

  perform(
    params: {
      priceLimit: BigNumberish;
      amountIn: BigNumberish;
      zeroForOne: boolean;
    },
    cache: {
      state: {
        protocolFees: { token0: BigNumberish; token1: BigNumberish };
        latestPrice: BigNumberish;
        liquidityGlobal: BigNumberish;
        lastTime: BigNumberish;
        auctionStart: BigNumberish;
        accumEpoch: BigNumberish;
        latestTick: BigNumberish;
        syncFee: BigNumberish;
        fillFee: BigNumberish;
        unlocked: BigNumberish;
      };
      syncFees: { token0: BigNumberish; token1: BigNumberish };
      constants: {
        source: string;
        bounds: { min: BigNumberish; max: BigNumberish };
        token0: string;
        token1: string;
        inputPool: string;
        minAmountPerAuction: BigNumberish;
        genesisTime: BigNumberish;
        minPositionWidth: BigNumberish;
        tickSpread: BigNumberish;
        twapLength: BigNumberish;
        auctionLength: BigNumberish;
        blockTime: BigNumberish;
        token0Decimals: BigNumberish;
        token1Decimals: BigNumberish;
        minAmountLowerPriced: boolean;
      };
      pool0: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      };
      pool1: {
        price: BigNumberish;
        liquidity: BigNumberish;
        amountInDelta: BigNumberish;
        amountInDeltaMaxClaimed: BigNumberish;
        amountOutDeltaMaxClaimed: BigNumberish;
      };
      price: BigNumberish;
      liquidity: BigNumberish;
      amountIn: BigNumberish;
      input: BigNumberish;
      output: BigNumberish;
      inputBoosted: BigNumberish;
      auctionDepth: BigNumberish;
      auctionBoost: BigNumberish;
      amountInDelta: BigNumberish;
    },
    overrides?: CallOverrides,
  ): Promise<
    [
      [
        [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
      ] & {
        protocolFees: [BigNumber, BigNumber] & {
          token0: BigNumber;
          token1: BigNumber;
        };
        latestPrice: BigNumber;
        liquidityGlobal: BigNumber;
        lastTime: number;
        auctionStart: number;
        accumEpoch: number;
        latestTick: number;
        syncFee: number;
        fillFee: number;
        unlocked: number;
      },
      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
      [
        string,
        [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber },
        string,
        string,
        string,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        boolean,
      ] & {
        source: string;
        bounds: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
        token0: string;
        token1: string;
        inputPool: string;
        minAmountPerAuction: BigNumber;
        genesisTime: number;
        minPositionWidth: number;
        tickSpread: number;
        twapLength: number;
        auctionLength: number;
        blockTime: number;
        token0Decimals: number;
        token1Decimals: number;
        minAmountLowerPriced: boolean;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      },
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      },
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
    ] & {
      state: [
        [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
        BigNumber,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
      ] & {
        protocolFees: [BigNumber, BigNumber] & {
          token0: BigNumber;
          token1: BigNumber;
        };
        latestPrice: BigNumber;
        liquidityGlobal: BigNumber;
        lastTime: number;
        auctionStart: number;
        accumEpoch: number;
        latestTick: number;
        syncFee: number;
        fillFee: number;
        unlocked: number;
      };
      syncFees: [BigNumber, BigNumber] & {
        token0: BigNumber;
        token1: BigNumber;
      };
      constants: [
        string,
        [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber },
        string,
        string,
        string,
        BigNumber,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        number,
        boolean,
      ] & {
        source: string;
        bounds: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
        token0: string;
        token1: string;
        inputPool: string;
        minAmountPerAuction: BigNumber;
        genesisTime: number;
        minPositionWidth: number;
        tickSpread: number;
        twapLength: number;
        auctionLength: number;
        blockTime: number;
        token0Decimals: number;
        token1Decimals: number;
        minAmountLowerPriced: boolean;
      };
      pool0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      };
      pool1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        price: BigNumber;
        liquidity: BigNumber;
        amountInDelta: BigNumber;
        amountInDeltaMaxClaimed: BigNumber;
        amountOutDeltaMaxClaimed: BigNumber;
      };
      price: BigNumber;
      liquidity: BigNumber;
      amountIn: BigNumber;
      input: BigNumber;
      output: BigNumber;
      inputBoosted: BigNumber;
      auctionDepth: BigNumber;
      auctionBoost: BigNumber;
      amountInDelta: BigNumber;
    }
  >;

  callStatic: {
    perform(
      params: {
        priceLimit: BigNumberish;
        amountIn: BigNumberish;
        zeroForOne: boolean;
      },
      cache: {
        state: {
          protocolFees: { token0: BigNumberish; token1: BigNumberish };
          latestPrice: BigNumberish;
          liquidityGlobal: BigNumberish;
          lastTime: BigNumberish;
          auctionStart: BigNumberish;
          accumEpoch: BigNumberish;
          latestTick: BigNumberish;
          syncFee: BigNumberish;
          fillFee: BigNumberish;
          unlocked: BigNumberish;
        };
        syncFees: { token0: BigNumberish; token1: BigNumberish };
        constants: {
          source: string;
          bounds: { min: BigNumberish; max: BigNumberish };
          token0: string;
          token1: string;
          inputPool: string;
          minAmountPerAuction: BigNumberish;
          genesisTime: BigNumberish;
          minPositionWidth: BigNumberish;
          tickSpread: BigNumberish;
          twapLength: BigNumberish;
          auctionLength: BigNumberish;
          blockTime: BigNumberish;
          token0Decimals: BigNumberish;
          token1Decimals: BigNumberish;
          minAmountLowerPriced: boolean;
        };
        pool0: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        pool1: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        price: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        input: BigNumberish;
        output: BigNumberish;
        inputBoosted: BigNumberish;
        auctionDepth: BigNumberish;
        auctionBoost: BigNumberish;
        amountInDelta: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<
      [
        [
          [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
        ] & {
          protocolFees: [BigNumber, BigNumber] & {
            token0: BigNumber;
            token1: BigNumber;
          };
          latestPrice: BigNumber;
          liquidityGlobal: BigNumber;
          lastTime: number;
          auctionStart: number;
          accumEpoch: number;
          latestTick: number;
          syncFee: number;
          fillFee: number;
          unlocked: number;
        },
        [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
        [
          string,
          [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber },
          string,
          string,
          string,
          BigNumber,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          boolean,
        ] & {
          source: string;
          bounds: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
          token0: string;
          token1: string;
          inputPool: string;
          minAmountPerAuction: BigNumber;
          genesisTime: number;
          minPositionWidth: number;
          tickSpread: number;
          twapLength: number;
          auctionLength: number;
          blockTime: number;
          token0Decimals: number;
          token1Decimals: number;
          minAmountLowerPriced: boolean;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        },
        [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        },
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
      ] & {
        state: [
          [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
          BigNumber,
          BigNumber,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
        ] & {
          protocolFees: [BigNumber, BigNumber] & {
            token0: BigNumber;
            token1: BigNumber;
          };
          latestPrice: BigNumber;
          liquidityGlobal: BigNumber;
          lastTime: number;
          auctionStart: number;
          accumEpoch: number;
          latestTick: number;
          syncFee: number;
          fillFee: number;
          unlocked: number;
        };
        syncFees: [BigNumber, BigNumber] & {
          token0: BigNumber;
          token1: BigNumber;
        };
        constants: [
          string,
          [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber },
          string,
          string,
          string,
          BigNumber,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          number,
          boolean,
        ] & {
          source: string;
          bounds: [BigNumber, BigNumber] & { min: BigNumber; max: BigNumber };
          token0: string;
          token1: string;
          inputPool: string;
          minAmountPerAuction: BigNumber;
          genesisTime: number;
          minPositionWidth: number;
          tickSpread: number;
          twapLength: number;
          auctionLength: number;
          blockTime: number;
          token0Decimals: number;
          token1Decimals: number;
          minAmountLowerPriced: boolean;
        };
        pool0: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        };
        pool1: [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
          price: BigNumber;
          liquidity: BigNumber;
          amountInDelta: BigNumber;
          amountInDeltaMaxClaimed: BigNumber;
          amountOutDeltaMaxClaimed: BigNumber;
        };
        price: BigNumber;
        liquidity: BigNumber;
        amountIn: BigNumber;
        input: BigNumber;
        output: BigNumber;
        inputBoosted: BigNumber;
        auctionDepth: BigNumber;
        auctionBoost: BigNumber;
        amountInDelta: BigNumber;
      }
    >;
  };

  filters: {};

  estimateGas: {
    perform(
      params: {
        priceLimit: BigNumberish;
        amountIn: BigNumberish;
        zeroForOne: boolean;
      },
      cache: {
        state: {
          protocolFees: { token0: BigNumberish; token1: BigNumberish };
          latestPrice: BigNumberish;
          liquidityGlobal: BigNumberish;
          lastTime: BigNumberish;
          auctionStart: BigNumberish;
          accumEpoch: BigNumberish;
          latestTick: BigNumberish;
          syncFee: BigNumberish;
          fillFee: BigNumberish;
          unlocked: BigNumberish;
        };
        syncFees: { token0: BigNumberish; token1: BigNumberish };
        constants: {
          source: string;
          bounds: { min: BigNumberish; max: BigNumberish };
          token0: string;
          token1: string;
          inputPool: string;
          minAmountPerAuction: BigNumberish;
          genesisTime: BigNumberish;
          minPositionWidth: BigNumberish;
          tickSpread: BigNumberish;
          twapLength: BigNumberish;
          auctionLength: BigNumberish;
          blockTime: BigNumberish;
          token0Decimals: BigNumberish;
          token1Decimals: BigNumberish;
          minAmountLowerPriced: boolean;
        };
        pool0: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        pool1: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        price: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        input: BigNumberish;
        output: BigNumberish;
        inputBoosted: BigNumberish;
        auctionDepth: BigNumberish;
        auctionBoost: BigNumberish;
        amountInDelta: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    perform(
      params: {
        priceLimit: BigNumberish;
        amountIn: BigNumberish;
        zeroForOne: boolean;
      },
      cache: {
        state: {
          protocolFees: { token0: BigNumberish; token1: BigNumberish };
          latestPrice: BigNumberish;
          liquidityGlobal: BigNumberish;
          lastTime: BigNumberish;
          auctionStart: BigNumberish;
          accumEpoch: BigNumberish;
          latestTick: BigNumberish;
          syncFee: BigNumberish;
          fillFee: BigNumberish;
          unlocked: BigNumberish;
        };
        syncFees: { token0: BigNumberish; token1: BigNumberish };
        constants: {
          source: string;
          bounds: { min: BigNumberish; max: BigNumberish };
          token0: string;
          token1: string;
          inputPool: string;
          minAmountPerAuction: BigNumberish;
          genesisTime: BigNumberish;
          minPositionWidth: BigNumberish;
          tickSpread: BigNumberish;
          twapLength: BigNumberish;
          auctionLength: BigNumberish;
          blockTime: BigNumberish;
          token0Decimals: BigNumberish;
          token1Decimals: BigNumberish;
          minAmountLowerPriced: boolean;
        };
        pool0: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        pool1: {
          price: BigNumberish;
          liquidity: BigNumberish;
          amountInDelta: BigNumberish;
          amountInDeltaMaxClaimed: BigNumberish;
          amountOutDeltaMaxClaimed: BigNumberish;
        };
        price: BigNumberish;
        liquidity: BigNumberish;
        amountIn: BigNumberish;
        input: BigNumberish;
        output: BigNumberish;
        inputBoosted: BigNumberish;
        auctionDepth: BigNumberish;
        auctionBoost: BigNumberish;
        amountInDelta: BigNumberish;
      },
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
