/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface RangePoolMockInterface extends ethers.utils.Interface {
  functions: {
    'increaseSampleLength(uint16)': FunctionFragment;
    'poolState()': FunctionFragment;
    'sample(uint32[])': FunctionFragment;
    'setObservationCardinality(uint16,uint16)': FunctionFragment;
    'setTickCumulatives(int56,int56,int56,int56)': FunctionFragment;
    'tickSpacing()': FunctionFragment;
    'token0()': FunctionFragment;
    'token1()': FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: 'increaseSampleLength',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'poolState', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'sample',
    values: [BigNumberish[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'setObservationCardinality',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'setTickCumulatives',
    values: [BigNumberish, BigNumberish, BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'tickSpacing',
    values?: undefined,
  ): string;
  encodeFunctionData(functionFragment: 'token0', values?: undefined): string;
  encodeFunctionData(functionFragment: 'token1', values?: undefined): string;

  decodeFunctionResult(
    functionFragment: 'increaseSampleLength',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'poolState', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sample', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setObservationCardinality',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'setTickCumulatives',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'tickSpacing',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'token0', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'token1', data: BytesLike): Result;

  events: {};
}

export class RangePoolMock extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RangePoolMockInterface;

  functions: {
    increaseSampleLength(
      cardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    poolState(overrides?: CallOverrides): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [number, number, number] & {
          index: number;
          length: number;
          lengthNext: number;
        },
        [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
      ]
    >;

    sample(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber, BigNumber, number] & {
        tickSecondsAccum: BigNumber[];
        secondsPerLiquidityAccum: BigNumber[];
        averagePrice: BigNumber;
        averageLiquidity: BigNumber;
        averageTick: number;
      }
    >;

    setObservationCardinality(
      _observationCardinality: BigNumberish,
      _observationCardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTickCumulatives(
      _tickCumulative0: BigNumberish,
      _tickCumulative1: BigNumberish,
      _tickCumulative2: BigNumberish,
      _tickCumulative3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<[number]>;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;
  };

  increaseSampleLength(
    cardinalityNext: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  poolState(overrides?: CallOverrides): Promise<
    [
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [number, number, number] & {
        index: number;
        length: number;
        lengthNext: number;
      },
      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
    ]
  >;

  sample(
    secondsAgos: BigNumberish[],
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber, BigNumber, number] & {
      tickSecondsAccum: BigNumber[];
      secondsPerLiquidityAccum: BigNumber[];
      averagePrice: BigNumber;
      averageLiquidity: BigNumber;
      averageTick: number;
    }
  >;

  setObservationCardinality(
    _observationCardinality: BigNumberish,
    _observationCardinalityNext: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTickCumulatives(
    _tickCumulative0: BigNumberish,
    _tickCumulative1: BigNumberish,
    _tickCumulative2: BigNumberish,
    _tickCumulative3: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tickSpacing(overrides?: CallOverrides): Promise<number>;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    increaseSampleLength(
      cardinalityNext: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    poolState(overrides?: CallOverrides): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [number, number, number] & {
          index: number;
          length: number;
          lengthNext: number;
        },
        [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber },
      ]
    >;

    sample(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber, BigNumber, number] & {
        tickSecondsAccum: BigNumber[];
        secondsPerLiquidityAccum: BigNumber[];
        averagePrice: BigNumber;
        averageLiquidity: BigNumber;
        averageTick: number;
      }
    >;

    setObservationCardinality(
      _observationCardinality: BigNumberish,
      _observationCardinalityNext: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTickCumulatives(
      _tickCumulative0: BigNumberish,
      _tickCumulative1: BigNumberish,
      _tickCumulative2: BigNumberish,
      _tickCumulative3: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    tickSpacing(overrides?: CallOverrides): Promise<number>;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;
  };

  filters: {};

  estimateGas: {
    increaseSampleLength(
      cardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    poolState(overrides?: CallOverrides): Promise<BigNumber>;

    sample(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setObservationCardinality(
      _observationCardinality: BigNumberish,
      _observationCardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTickCumulatives(
      _tickCumulative0: BigNumberish,
      _tickCumulative1: BigNumberish,
      _tickCumulative2: BigNumberish,
      _tickCumulative3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    increaseSampleLength(
      cardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    poolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sample(
      secondsAgos: BigNumberish[],
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setObservationCardinality(
      _observationCardinality: BigNumberish,
      _observationCardinalityNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTickCumulatives(
      _tickCumulative0: BigNumberish,
      _tickCumulative1: BigNumberish,
      _tickCumulative2: BigNumberish,
      _tickCumulative3: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
