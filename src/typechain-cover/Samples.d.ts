/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface SamplesInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    'SampleLengthIncreased(uint16)': EventFragment;
    'SampleRecorded(int56,uint160)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'SampleLengthIncreased'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SampleRecorded'): EventFragment;
}

export type SampleLengthIncreasedEvent = TypedEvent<
  [number] & { sampleLengthNext: number }
>;

export type SampleRecordedEvent = TypedEvent<
  [BigNumber, BigNumber] & {
    tickSecondsAccum: BigNumber;
    secondsPerLiquidityAccum: BigNumber;
  }
>;

export class Samples extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: SamplesInterface;

  functions: {};

  callStatic: {};

  filters: {
    'SampleLengthIncreased(uint16)'(
      sampleLengthNext?: null,
    ): TypedEventFilter<[number], { sampleLengthNext: number }>;

    SampleLengthIncreased(
      sampleLengthNext?: null,
    ): TypedEventFilter<[number], { sampleLengthNext: number }>;

    'SampleRecorded(int56,uint160)'(
      tickSecondsAccum?: null,
      secondsPerLiquidityAccum?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tickSecondsAccum: BigNumber; secondsPerLiquidityAccum: BigNumber }
    >;

    SampleRecorded(
      tickSecondsAccum?: null,
      secondsPerLiquidityAccum?: null,
    ): TypedEventFilter<
      [BigNumber, BigNumber],
      { tickSecondsAccum: BigNumber; secondsPerLiquidityAccum: BigNumber }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
