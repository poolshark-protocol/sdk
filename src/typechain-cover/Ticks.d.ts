/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TicksInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "Initialize(int24,int24,int24,uint32,uint32,uint160,uint160)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
}

export type InitializeEvent = TypedEvent<
  [number, number, number, number, number, BigNumber, BigNumber] & {
    minTick: number;
    maxTick: number;
    latestTick: number;
    genesisTime: number;
    auctionStart: number;
    pool0Price: BigNumber;
    pool1Price: BigNumber;
  }
>;

export class Ticks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TicksInterface;

  functions: {};

  callStatic: {};

  filters: {
    "Initialize(int24,int24,int24,uint32,uint32,uint160,uint160)"(
      minTick?: null,
      maxTick?: null,
      latestTick?: null,
      genesisTime?: null,
      auctionStart?: null,
      pool0Price?: null,
      pool1Price?: null
    ): TypedEventFilter<
      [number, number, number, number, number, BigNumber, BigNumber],
      {
        minTick: number;
        maxTick: number;
        latestTick: number;
        genesisTime: number;
        auctionStart: number;
        pool0Price: BigNumber;
        pool1Price: BigNumber;
      }
    >;

    Initialize(
      minTick?: null,
      maxTick?: null,
      latestTick?: null,
      genesisTime?: null,
      auctionStart?: null,
      pool0Price?: null,
      pool1Price?: null
    ): TypedEventFilter<
      [number, number, number, number, number, BigNumber, BigNumber],
      {
        minTick: number;
        maxTick: number;
        latestTick: number;
        genesisTime: number;
        auctionStart: number;
        pool0Price: BigNumber;
        pool1Price: BigNumber;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
