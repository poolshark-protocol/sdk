/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import { Provider } from '@ethersproject/providers';
import type { ICoverPool, ICoverPoolInterface } from '../ICoverPool';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint128',
            name: 'burnPercent',
            type: 'uint128',
          },
          {
            internalType: 'int24',
            name: 'lower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'claim',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'upper',
            type: 'int24',
          },
          {
            internalType: 'bool',
            name: 'zeroForOne',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'sync',
            type: 'bool',
          },
        ],
        internalType: 'struct ICoverPool.BurnParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'burn',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint16',
        name: 'syncFee',
        type: 'uint16',
      },
      {
        internalType: 'uint16',
        name: 'fillFee',
        type: 'uint16',
      },
      {
        internalType: 'bool',
        name: 'setFees',
        type: 'bool',
      },
    ],
    name: 'fees',
    outputs: [
      {
        internalType: 'uint128',
        name: 'token0Fees',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: 'token1Fees',
        type: 'uint128',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint128',
            name: 'amount',
            type: 'uint128',
          },
          {
            internalType: 'int24',
            name: 'lower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'upper',
            type: 'int24',
          },
          {
            internalType: 'bool',
            name: 'zeroForOne',
            type: 'bool',
          },
        ],
        internalType: 'struct ICoverPool.MintParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint160',
            name: 'priceLimit',
            type: 'uint160',
          },
          {
            internalType: 'uint128',
            name: 'amountIn',
            type: 'uint128',
          },
          {
            internalType: 'bool',
            name: 'zeroForOne',
            type: 'bool',
          },
        ],
        internalType: 'struct ICoverPool.QuoteParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'quote',
    outputs: [
      {
        internalType: 'int256',
        name: 'inAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'outAmount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'priceAfter',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'owner',
            type: 'address',
          },
          {
            internalType: 'uint128',
            name: 'burnPercent',
            type: 'uint128',
          },
          {
            internalType: 'int24',
            name: 'lower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'claim',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'upper',
            type: 'int24',
          },
          {
            internalType: 'bool',
            name: 'zeroForOne',
            type: 'bool',
          },
        ],
        internalType: 'struct ICoverPool.SnapshotParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'snapshot',
    outputs: [
      {
        components: [
          {
            internalType: 'uint160',
            name: 'claimPriceLast',
            type: 'uint160',
          },
          {
            internalType: 'uint128',
            name: 'liquidity',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'amountIn',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'amountOut',
            type: 'uint128',
          },
          {
            internalType: 'uint32',
            name: 'accumEpochLast',
            type: 'uint32',
          },
        ],
        internalType: 'struct ICoverPoolStructs.Position',
        name: 'position',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'refundTo',
            type: 'address',
          },
          {
            internalType: 'uint160',
            name: 'priceLimit',
            type: 'uint160',
          },
          {
            internalType: 'uint128',
            name: 'amountIn',
            type: 'uint128',
          },
          {
            internalType: 'bool',
            name: 'zeroForOne',
            type: 'bool',
          },
        ],
        internalType: 'struct ICoverPool.SwapParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'swap',
    outputs: [
      {
        internalType: 'int256',
        name: 'inAmount',
        type: 'int256',
      },
      {
        internalType: 'uint256',
        name: 'outAmount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'priceAfter',
        type: 'uint256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class ICoverPool__factory {
  static readonly abi = _abi;
  static createInterface(): ICoverPoolInterface {
    return new utils.Interface(_abi) as ICoverPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): ICoverPool {
    return new Contract(address, _abi, signerOrProvider) as ICoverPool;
  }
}
