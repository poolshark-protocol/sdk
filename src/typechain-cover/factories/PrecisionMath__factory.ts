/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { PrecisionMath, PrecisionMathInterface } from '../PrecisionMath';

const _abi = [
  {
    inputs: [],
    name: 'MaxUintExceeded',
    type: 'error',
  },
];

const _bytecode =
  '0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea2646970667358221220c1dc36af621c3b881f7a8f8bd6f457f3a0ee4bc70a9f5c57d237a701665f576c64736f6c634300080d0033';

export class PrecisionMath__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<PrecisionMath> {
    return super.deploy(overrides || {}) as Promise<PrecisionMath>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PrecisionMath {
    return super.attach(address) as PrecisionMath;
  }
  connect(signer: Signer): PrecisionMath__factory {
    return super.connect(signer) as PrecisionMath__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PrecisionMathInterface {
    return new utils.Interface(_abi) as PrecisionMathInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): PrecisionMath {
    return new Contract(address, _abi, signerOrProvider) as PrecisionMath;
  }
}
