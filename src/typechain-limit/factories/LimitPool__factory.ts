/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { LimitPool, LimitPoolInterface } from '../LimitPool';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'CollectToZeroAddress',
    type: 'error',
  },
  {
    inputs: [],
    name: 'FactoryOnly',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidPosition',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidSwapFee',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidTick',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidTickSpread',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidToken',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidTokenDecimals',
    type: 'error',
  },
  {
    inputs: [],
    name: 'LiquidityOverflow',
    type: 'error',
  },
  {
    inputs: [],
    name: 'Locked',
    type: 'error',
  },
  {
    inputs: [],
    name: 'LowerNotEvenTick',
    type: 'error',
  },
  {
    inputs: [],
    name: 'MaxTickLiquidity',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotEnoughOutputLiquidity',
    type: 'error',
  },
  {
    inputs: [],
    name: 'Overflow',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OwnerOnly',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ProtocolFeeCeilingExceeded',
    type: 'error',
  },
  {
    inputs: [],
    name: 'Token0Missing',
    type: 'error',
  },
  {
    inputs: [],
    name: 'Token1Missing',
    type: 'error',
  },
  {
    inputs: [],
    name: 'UpperNotOddTick',
    type: 'error',
  },
  {
    inputs: [],
    name: 'WaitUntilEnoughObservations',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint128',
            name: 'burnPercent',
            type: 'uint128',
          },
          {
            internalType: 'int24',
            name: 'lower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'claim',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'upper',
            type: 'int24',
          },
          {
            internalType: 'bool',
            name: 'zeroForOne',
            type: 'bool',
          },
        ],
        internalType: 'struct ILimitPoolStructs.BurnParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'burn',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'feeTo',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint16',
        name: 'protocolFee0',
        type: 'uint16',
      },
      {
        internalType: 'uint16',
        name: 'protocolFee1',
        type: 'uint16',
      },
      {
        internalType: 'bool',
        name: 'setFees',
        type: 'bool',
      },
    ],
    name: 'fees',
    outputs: [
      {
        internalType: 'uint128',
        name: 'token0Fees',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: 'token1Fees',
        type: 'uint128',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'globalState',
    outputs: [
      {
        internalType: 'uint8',
        name: 'unlocked',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'immutables',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'owner',
            type: 'address',
          },
          {
            components: [
              {
                internalType: 'uint160',
                name: 'min',
                type: 'uint160',
              },
              {
                internalType: 'uint160',
                name: 'max',
                type: 'uint160',
              },
            ],
            internalType: 'struct ConstantProduct.PriceBounds',
            name: 'bounds',
            type: 'tuple',
          },
          {
            internalType: 'address',
            name: 'token0',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'token1',
            type: 'address',
          },
          {
            internalType: 'int16',
            name: 'tickSpacing',
            type: 'int16',
          },
        ],
        internalType: 'struct ILimitPoolStructs.Immutables',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'owner',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'token0',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'token1',
            type: 'address',
          },
          {
            internalType: 'uint160',
            name: 'minPrice',
            type: 'uint160',
          },
          {
            internalType: 'uint160',
            name: 'maxPrice',
            type: 'uint160',
          },
          {
            internalType: 'uint160',
            name: 'startPrice',
            type: 'uint160',
          },
          {
            internalType: 'int16',
            name: 'tickSpacing',
            type: 'int16',
          },
        ],
        internalType: 'struct LimitPoolFactoryStructs.LimitPoolParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'initialize',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'maxPrice',
    outputs: [
      {
        internalType: 'uint160',
        name: '',
        type: 'uint160',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'minPrice',
    outputs: [
      {
        internalType: 'uint160',
        name: '',
        type: 'uint160',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'refundTo',
            type: 'address',
          },
          {
            internalType: 'uint128',
            name: 'amount',
            type: 'uint128',
          },
          {
            internalType: 'uint96',
            name: 'mintPercent',
            type: 'uint96',
          },
          {
            internalType: 'int24',
            name: 'lower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'upper',
            type: 'int24',
          },
          {
            internalType: 'bool',
            name: 'zeroForOne',
            type: 'bool',
          },
        ],
        internalType: 'struct ILimitPoolStructs.MintParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'mint',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'owner',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pool0',
    outputs: [
      {
        internalType: 'uint160',
        name: 'price',
        type: 'uint160',
      },
      {
        internalType: 'uint128',
        name: 'liquidity',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: 'liquidityGlobal',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: 'protocolFees',
        type: 'uint128',
      },
      {
        internalType: 'uint32',
        name: 'swapEpoch',
        type: 'uint32',
      },
      {
        internalType: 'uint16',
        name: 'protocolFee',
        type: 'uint16',
      },
      {
        internalType: 'int24',
        name: 'tickAtPrice',
        type: 'int24',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'pool1',
    outputs: [
      {
        internalType: 'uint160',
        name: 'price',
        type: 'uint160',
      },
      {
        internalType: 'uint128',
        name: 'liquidity',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: 'liquidityGlobal',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: 'protocolFees',
        type: 'uint128',
      },
      {
        internalType: 'uint32',
        name: 'swapEpoch',
        type: 'uint32',
      },
      {
        internalType: 'uint16',
        name: 'protocolFee',
        type: 'uint16',
      },
      {
        internalType: 'int24',
        name: 'tickAtPrice',
        type: 'int24',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'int24',
        name: '',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: '',
        type: 'int24',
      },
    ],
    name: 'positions0',
    outputs: [
      {
        internalType: 'uint160',
        name: 'claimPriceLast',
        type: 'uint160',
      },
      {
        internalType: 'uint128',
        name: 'liquidity',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: 'amountIn',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: 'amountOut',
        type: 'uint128',
      },
      {
        internalType: 'uint32',
        name: 'epochLast',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
      {
        internalType: 'int24',
        name: '',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: '',
        type: 'int24',
      },
    ],
    name: 'positions1',
    outputs: [
      {
        internalType: 'uint160',
        name: 'claimPriceLast',
        type: 'uint160',
      },
      {
        internalType: 'uint128',
        name: 'liquidity',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: 'amountIn',
        type: 'uint128',
      },
      {
        internalType: 'uint128',
        name: 'amountOut',
        type: 'uint128',
      },
      {
        internalType: 'uint32',
        name: 'epochLast',
        type: 'uint32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint160',
            name: 'priceLimit',
            type: 'uint160',
          },
          {
            internalType: 'uint128',
            name: 'amount',
            type: 'uint128',
          },
          {
            internalType: 'bool',
            name: 'exactIn',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'zeroForOne',
            type: 'bool',
          },
        ],
        internalType: 'struct ILimitPoolStructs.QuoteParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'quote',
    outputs: [
      {
        internalType: 'uint256',
        name: 'inAmount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'outAmount',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'priceAfter',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'owner',
            type: 'address',
          },
          {
            internalType: 'uint128',
            name: 'burnPercent',
            type: 'uint128',
          },
          {
            internalType: 'int24',
            name: 'lower',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'upper',
            type: 'int24',
          },
          {
            internalType: 'int24',
            name: 'claim',
            type: 'int24',
          },
          {
            internalType: 'bool',
            name: 'zeroForOne',
            type: 'bool',
          },
        ],
        internalType: 'struct ILimitPoolStructs.SnapshotParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'snapshot',
    outputs: [
      {
        components: [
          {
            internalType: 'uint160',
            name: 'claimPriceLast',
            type: 'uint160',
          },
          {
            internalType: 'uint128',
            name: 'liquidity',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'amountIn',
            type: 'uint128',
          },
          {
            internalType: 'uint128',
            name: 'amountOut',
            type: 'uint128',
          },
          {
            internalType: 'uint32',
            name: 'epochLast',
            type: 'uint32',
          },
        ],
        internalType: 'struct ILimitPoolStructs.Position',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'to',
            type: 'address',
          },
          {
            internalType: 'uint160',
            name: 'priceLimit',
            type: 'uint160',
          },
          {
            internalType: 'uint128',
            name: 'amount',
            type: 'uint128',
          },
          {
            internalType: 'bool',
            name: 'exactIn',
            type: 'bool',
          },
          {
            internalType: 'bool',
            name: 'zeroForOne',
            type: 'bool',
          },
          {
            internalType: 'bytes',
            name: 'callbackData',
            type: 'bytes',
          },
        ],
        internalType: 'struct ILimitPoolStructs.SwapParams',
        name: 'params',
        type: 'tuple',
      },
    ],
    name: 'swap',
    outputs: [
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
      {
        internalType: 'int256',
        name: '',
        type: 'int256',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'tickMap',
    outputs: [
      {
        internalType: 'uint256',
        name: 'blocks',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'tickSpacing',
    outputs: [
      {
        internalType: 'int16',
        name: '',
        type: 'int16',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: '',
        type: 'int24',
      },
    ],
    name: 'ticks0',
    outputs: [
      {
        internalType: 'uint160',
        name: 'priceAt',
        type: 'uint160',
      },
      {
        internalType: 'int128',
        name: 'liquidityDelta',
        type: 'int128',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: '',
        type: 'int24',
      },
    ],
    name: 'ticks1',
    outputs: [
      {
        internalType: 'uint160',
        name: 'priceAt',
        type: 'uint160',
      },
      {
        internalType: 'int128',
        name: 'liquidityDelta',
        type: 'int128',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'token0',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'token1',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50612a81806100206000396000f3fe608060405234801561001057600080fd5b506004361061014d5760003560e01c8063a8ecc212116100c3578063e38d6b5c1161007c578063e38d6b5c14610534578063e45be8eb1461053c578063e76c01e414610544578063ef2a685514610563578063f3f3b7ad14610599578063fdf53665146105ac57600080fd5b8063a8ecc212146103db578063c81533a41461040e578063d0c93a7c14610465578063d21220a714610497578063db62455a1461049f578063e323eb0e1461050c57600080fd5b80633a76fa27116101155780633a76fa271461026157806343865d4e146103155780637e2339fd146103435780638da5cb5b1461035b578063909181e814610363578063a0176b071461038357600080fd5b8063017e7e581461015257806305ea3ed5146101825780630dfe168114610231578063127ed61d146102395780633205ba941461024e575b600080fd5b600b54610165906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6004546005546006546101d7926001600160a01b0316916001600160801b0380821692600160801b9283900482169291811691810463ffffffff1690600160a01b810461ffff1690600160b01b900460020b87565b604080516001600160a01b0390981688526001600160801b0396871660208901529486169487019490945293909116606085015263ffffffff16608084015261ffff90911660a083015260020b60c082015260e001610179565b61016561060f565b61024c61024736600461198a565b610620565b005b61024c61025c3660046119bc565b610a20565b6102ce61026f366004611a5c565b600e6020908152600093845260408085208252928452828420905282529020805460018201546002909201546001600160a01b03909116916001600160801b0380821692600160801b928390048216929181169163ffffffff91041685565b604080516001600160a01b0390961686526001600160801b0394851660208701529284169285019290925291909116606083015263ffffffff16608082015260a001610179565b610328610323366004611aa7565b610aab565b60408051938452602084019290925290820152606001610179565b60075461034d9081565b604051908152602001610179565b610165610c13565b61037661037136600461198a565b610c1f565b6040516101799190611b7b565b6103b9610391366004611b89565b600d60205260009081526040902080546001909101546001600160a01b0390911690600f0b82565b604080516001600160a01b039093168352600f9190910b602083015201610179565b6103ee6103e9366004611bb6565b610d87565b604080516001600160801b03938416815292909116602083015201610179565b600154600280546003546101d7936001600160a01b0316926001600160801b0380841693600160801b908190048216939182169290820463ffffffff1691600160a01b810461ffff1691600160b01b909104900b87565b61048460003660011981013560f090811c90910360640135901c905090565b60405160019190910b8152602001610179565b610165610ef6565b6102ce6104ad366004611a5c565b600f6020908152600093845260408085208252928452828420905282529020805460018201546002909201546001600160a01b03909116916001600160801b0380821692600160801b928390048216929181169163ffffffff91041685565b61051f61051a366004611c83565b610f02565b60408051928352602083019190915201610179565b610165611087565b610165611093565b6000546105519060ff1681565b60405160ff9091168152602001610179565b6103b9610571366004611b89565b600c60205260009081526040902080546001909101546001600160a01b0390911690600f0b82565b61024c6105a7366004611d4b565b61109f565b6105b46112fd565b6040805182516001600160a01b039081168252602080850151805183168285015201518116828401529183015182166060808301919091528301519091166080808301919091529091015160010b60a082015260c001610179565b600061061b60146113b4565b905090565b6106286113c8565b80516001600160a01b031661065057604051636a0b0d4f60e01b815260040160405180910390fd5b6040805160a08082019092526000805460ff166080830190815282529183015160208201906106b057336000908152600f6020908152604080832087820151600290810b8552908352818420608089015190910b845290915290206106e3565b336000908152600e6020908152604080832087820151600290810b8552908352818420608089015190910b845290915290205b6040805160a08101825282546001600160a01b0316815260018301546001600160801b03808216602080850191909152600160801b92839004821694840194909452600290940154938416606083015290920463ffffffff1660808301529082520161074d6112fd565b81526020018360a00151610762576004610765565b60015b6040805160e08101825282546001600160a01b0316815260018301546001600160801b038082166020840152600160801b918290048116938301939093526002938401549283166060830152820463ffffffff166080820152600160a01b820461ffff1660a080830191909152600160b01b90920490920b60c0830152915283015190915073__$5dad83152cc730ce53bb65fb4ae6d99ea9$__906368f27081908490849060079061081857600d61081b565b600c5b8760a0015161082b57600f61082e565b600e5b6040518663ffffffff1660e01b815260040161084e959493929190611eed565b61026060405180830381865af415801561086c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089091906121fa565b90508160a0015115610956576060808201518051600180546001600160a01b039092166001600160a01b0319928316179055602082015160408301516001600160801b03908116600160801b908102928216929092176002559383015160038054608086015160a087015160c09097015162ffffff16600160b01b0262ffffff60b01b1961ffff909816600160a01b029790971664ffffffffff60a01b1963ffffffff909216909502919095169290961691909117949094179190911617179055610a0c565b6060808201518051600480546001600160a01b039092166001600160a01b0319928316179055602082015160408301516001600160801b03908116600160801b908102928216929092176005559383015160068054608086015160a087015160c09097015162ffffff16600160b01b0262ffffff60b01b1961ffff909816600160a01b029790971664ffffffffff60a01b1963ffffffff9092169095029190951692909616919091179490941791909116171790555b50506000805460ff19166001179055565b50565b610a286113c8565b604051637aba586f60e11b815273__$dc25dd3a5fe6a540f35c01c335c2ccfd23$__9063f574b0de90610a6a9060079060019060049060009088908301612271565b602060405180830381865af4158015610a87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a0c919061230f565b6000806000610ab86115f0565b8460600151610ac8576001610acb565b60045b6040805160e08101825282546001600160a01b0316815260018301546001600160801b03808216602080850191909152600160801b92839004821684860152600295860154918216606085015291810463ffffffff166080840152600160a01b810461ffff1660a0840152600160b01b900490930b60c0820152838201528051918201905260005460ff1681528152610b626112fd565b816020018190525073__$9e4c229d336278bda7a6b638eb4f56779a$__635519a683868360078960600151610b9857600c610b9b565b600d5b6040518563ffffffff1660e01b8152600401610bba94939291906123d2565b606060405180830381865af4158015610bd7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bfb9190612430565b91955093506001600160a01b03169150509193909250565b600061061b60006113b4565b6040805160a08101825260008082526020820181905291810182905260608101829052608081019190915273__$76cc67c47c6cd8fa14026cc00c5aa66f37$__633c9e17f68360a00151610c7457600f610c77565b600e5b8460a00151610c8757600d610c8a565b600c5b600760008760a00151610c9e576004610ca1565b60015b6040518060e001604052808a600001516001600160a01b031681526020018a600001516001600160a01b031681526020018a602001516001600160801b031681526020018a6040015160020b81526020018a6060015160020b81526020018a6080015160020b81526020018a60a001511515815250610d1e6112fd565b6040518863ffffffff1660e01b8152600401610d40979695949392919061245e565b60a060405180830381865af4158015610d5d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d819190612579565b92915050565b600080610d926113fd565b8215610dff576127108561ffff161180610db157506127108461ffff16115b15610dcf5760405163acacfb3d60e01b815260040160405180910390fd5b6006805461ffff808816600160a01b90810261ffff60a01b19938416179093556003805491881690930291161790555b6000610e09610c13565b6001600160a01b031663017e7e586040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e46573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610e6a9190612595565b60068054600380546fffffffffffffffffffffffffffffffff198082169092559082169092556001600160801b03908116955016925090508215610ec357610ec381610eb461060f565b856001600160801b0316611438565b6001600160801b03821615610eed57610eed81610ede610ef6565b846001600160801b0316611438565b50935093915050565b600061061b60286113b4565b600080610f0d6113c8565b610f156115f0565b8360800151610f25576001610f28565b60045b6040805160e08101825282546001600160a01b0316815260018301546001600160801b03808216602080850191909152600160801b92839004821684860152600295860154918216606085015291810463ffffffff166080840152600160a01b810461ffff1660a0840152600160b01b900490930b60c0820152838201528051918201905260005460ff1681528152610fbf6112fd565b816020018190525073__$8397ab196537c2cfcd89b6140849e98c7e$__639d07049e858360078860800151610ff5576001610ff8565b60045b896080015161100857600c61100b565b600d5b6040518663ffffffff1660e01b815260040161102b9594939291906125ff565b6040805180830381865af4158015611047573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061106b91906126a0565b92509250506110826000805460ff19166001179055565b915091565b600061061b60506113b4565b600061061b603c6113b4565b6110a76113c8565b6110af611676565b604080516020810190915260005460ff16815281526110cc6112fd565b604082015260c08201516110e15760046110e4565b60015b6040805160e08101825282546001600160a01b0316815260018301546001600160801b038082166020840152600160801b9182900481169383019390935260029384015492831660608084019190915290830463ffffffff166080830152600160a01b830461ffff1660a0830152600160b01b90920490920b60c0808401919091529083019190915282015161117b57600161117e565b60045b6040805160e08101825282546001600160a01b0316815260018301546001600160801b038082166020840152600160801b918290048116938301939093526002938401549283166060830152820463ffffffff16608080830191909152600160a01b830461ffff1660a0830152600160b01b90920490920b60c0808401919091529083019190915282015173__$007bbb7dd8ce8caff62f844d2fbd2823ce$__9063d35defa5908490849060079061123757600461123a565b60015b8760c0015161124a57600161124d565b60045b8860c0015161125d57600d611260565b600c5b8960c0015161127057600c611273565b600d5b8a60c0015161128357600f611286565b600e5b6040518963ffffffff1660e01b81526004016112a9989796959493929190612796565b61072060405180830381865af41580156112c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112eb919061293f565b50506000805460ff1916600117905550565b61130561172c565b6040518060a00160405280611318610c13565b6001600160a01b031681526020016040518060400160405280611339611093565b6001600160a01b0316815260200161134f611087565b6001600160a01b03169052815260200161136761060f565b6001600160a01b0316815260200161137d610ef6565b6001600160a01b031681526020016113aa60003660011981013560f090811c90910360640135901c905090565b60010b9052919050565b3660011981013560f01c9003013560601c90565b60005460ff166002036113ee576040516303cb96db60e21b815260040160405180910390fd5b6000805460ff19166002179055565b611405610c13565b6001600160a01b0316336001600160a01b03161461143657604051630b2db9b760e31b815260040160405180910390fd5b565b6001600160a01b0382166114d7578047101561149b5760405162461bcd60e51b815260206004820181905260248201527f5472616e736665724661696c656428616464726573732874686973292c20746f60448201526064015b60405180910390fd5b6040516001600160a01b0384169082156108fc029083906000818181858888f193505050501580156114d1573d6000803e3d6000fd5b50505050565b806000036114e457505050565b60405163a9059cbb60e01b81526001600160a01b0384811660048301526024820183905283919082169063a9059cbb906044016020604051808303816000875af1158015611536573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061155a9190612a2e565b5060003d8015611575576020811461157e576000915061158a565b6001915061158a565b60206000803e60005191505b50806115e95760405162461bcd60e51b815260206004820152602860248201527f5472616e736665724661696c656428616464726573732874686973292c206d73604482015267339739b2b73232b960c11b6064820152608401611492565b5050505050565b604080516101a081019091526000610180820190815281526020810161161461172c565b8152602001611621611791565b8152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600060020b81526020016000151581526020016000151581525090565b604080516101e08101825260006101c082018181528252825160a0810184528181526020808201839052818501839052606082018390526080820192909252908201529081016116c461172c565b81526020016116d1611791565b81526020016116de611791565b81526020016116eb6115f0565b815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600060020b81525090565b6040518060a0016040528060006001600160a01b03168152602001611776604051806040016040528060006001600160a01b0316815260200160006001600160a01b031681525090565b81526000602082018190526040820181905260609091015290565b6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c081019190915290565b634e487b7160e01b600052604160045260246000fd5b60405160c0810167ffffffffffffffff81118282101715611806576118066117cd565b60405290565b60405160e0810167ffffffffffffffff81118282101715611806576118066117cd565b60405160a0810167ffffffffffffffff81118282101715611806576118066117cd565b604051610180810167ffffffffffffffff81118282101715611806576118066117cd565b6040516101c0810167ffffffffffffffff81118282101715611806576118066117cd565b6001600160a01b0381168114610a1d57600080fd5b6001600160801b0381168114610a1d57600080fd5b8060020b8114610a1d57600080fd5b80356118de816118c4565b919050565b8015158114610a1d57600080fd5b80356118de816118e3565b600060c0828403121561190e57600080fd5b6119166117e3565b905081356119238161189a565b81526020820135611933816118af565b60208201526040820135611946816118c4565b60408201526060820135611959816118c4565b6060820152608082013561196c816118c4565b608082015260a082013561197f816118e3565b60a082015292915050565b600060c0828403121561199c57600080fd5b6119a683836118fc565b9392505050565b8060010b8114610a1d57600080fd5b600060e082840312156119ce57600080fd5b6119d661180c565b82356119e18161189a565b815260208301356119f18161189a565b60208201526040830135611a048161189a565b60408201526060830135611a178161189a565b60608201526080830135611a2a8161189a565b608082015260a0830135611a3d8161189a565b60a082015260c0830135611a50816119ad565b60c08201529392505050565b600080600060608486031215611a7157600080fd5b8335611a7c8161189a565b92506020840135611a8c816118c4565b91506040840135611a9c816118c4565b809150509250925092565b600060808284031215611ab957600080fd5b6040516080810181811067ffffffffffffffff82111715611adc57611adc6117cd565b6040528235611aea8161189a565b81526020830135611afa816118af565b60208201526040830135611b0d816118e3565b60408201526060830135611b20816118e3565b60608201529392505050565b80516001600160a01b031682526020808201516001600160801b03908116918401919091526040808301518216908401526060808301519091169083015260809081015163ffffffff16910152565b60a08101610d818284611b2c565b600060208284031215611b9b57600080fd5b81356119a6816118c4565b61ffff81168114610a1d57600080fd5b600080600060608486031215611bcb57600080fd5b8335611bd681611ba6565b92506020840135611be681611ba6565b91506040840135611a9c816118e3565b600082601f830112611c0757600080fd5b813567ffffffffffffffff80821115611c2257611c226117cd565b604051601f8301601f19908116603f01168101908282118183101715611c4a57611c4a6117cd565b81604052838152866020858801011115611c6357600080fd5b836020870160208301376000602085830101528094505050505092915050565b600060208284031215611c9557600080fd5b813567ffffffffffffffff80821115611cad57600080fd5b9083019060c08286031215611cc157600080fd5b611cc96117e3565b8235611cd48161189a565b81526020830135611ce48161189a565b60208201526040830135611cf7816118af565b6040820152611d08606084016118f1565b6060820152611d19608084016118f1565b608082015260a083013582811115611d3057600080fd5b611d3c87828601611bf6565b60a08301525095945050505050565b600060e08284031215611d5d57600080fd5b611d6561180c565b8235611d708161189a565b81526020830135611d808161189a565b60208201526040830135611d93816118af565b604082015260608301356bffffffffffffffffffffffff81168114611db757600080fd5b6060820152611dc8608084016118d3565b6080820152611dd960a084016118d3565b60a0820152611a5060c084016118f1565b80516001600160a01b039081168352602080830151805183168286015290810151821660408501525080604083015116606084015280606083015116608084015250608081015160010b60a08301525050565b60018060a01b03815116825260208101516001600160801b038082166020850152806040840151166040850152806060840151166060850152505063ffffffff608082015116608083015261ffff60a08201511660a083015260c081015160020b60c08301525050565b60ff8151511682526020810151611ec16020840182611b2c565b506040810151611ed460c0840182611dea565b506060810151611ee8610180840182611e3d565b505050565b60006103808201905060018060a01b0387511682526001600160801b036020880151166020830152604087015160020b6040830152606087015160020b6060830152608087015160020b608083015260a0870151151560a0830152611f5560c0830187611ea7565b8461032083015283610340830152826103608301529695505050505050565b600060208284031215611f8657600080fd5b6040516020810181811067ffffffffffffffff82111715611fa957611fa96117cd565b8060405250809150825160ff81168114611fc257600080fd5b905292915050565b80516118de8161189a565b805163ffffffff811681146118de57600080fd5b600060a08284031215611ffb57600080fd5b61200361182f565b905081516120108161189a565b81526020820151612020816118af565b60208201526040820151612033816118af565b60408201526060820151612046816118af565b606082015261205760808301611fd5565b608082015292915050565b80516118de816119ad565b600081830360c081121561208057600080fd5b61208861182f565b915082516120958161189a565b82526040601f1982018113156120aa57600080fd5b8051915080820182811067ffffffffffffffff821117156120cd576120cd6117cd565b815260208401516120dd8161189a565b8252838101516120ec8161189a565b8060208401525081602084015261210560608501611fca565b908301525061211660808301611fca565b606082015261205760a08301612062565b80516118de81611ba6565b80516118de816118c4565b600060e0828403121561214f57600080fd5b60405160e0810181811067ffffffffffffffff82111715612172576121726117cd565b806040525080915082516121858161189a565b81526020830151612195816118af565b602082015260408301516121a8816118af565b604082015260608301516121bb816118af565b60608201526121cc60808401611fd5565b60808201526121dd60a08401612127565b60a08201526121ee60c08401612132565b60c08201525092915050565b6000610260828403121561220d57600080fd5b6040516080810181811067ffffffffffffffff82111715612230576122306117cd565b60405261223d8484611f74565b815261224c8460208501611fe9565b602082015261225e8460c0850161206d565b6040820152611b2084610180850161213d565b8581526020810185905260408101849052825460ff166060820152610160810160018060a01b038084511660808401528060208501511660a08401528060408501511660c08401528060608501511660e0840152806080850151166101008401525060a08301516122ee6101208401826001600160a01b03169052565b5060c083015161230461014084018260010b9052565b509695505050505050565b60006020828403121561232157600080fd5b6119a68383611f74565b80515160ff16825260208101516123456020840182611dea565b50604081015161235860e0840182611e3d565b5060608101516101c083015260808101516101e083015260a081015161020083015260c081015161022083015260e08101516102408301526101008101516001600160a01b031661026083015261012081015160020b61028083015261014081015115156102a0830152610160015115156102c090910152565b84516001600160a01b031681526020808601516001600160801b0316908201526040808601511515908201526060808601511515908201526103a0810161241c608083018661232b565b610360820193909352610380015292915050565b60008060006060848603121561244557600080fd5b83519250602084015191506040840151611a9c8161189a565b8781526020810187905260408101869052845460ff166060820152610300810184546001600160a01b0316608083015260018501546001600160801b0380821660a0850152608082901c60c085015260028701546001600160801b038282161660e0860152915050608081901c63ffffffff1661010084015260a081901c61ffff1661012084015260b081901c60020b6101408401525083516001600160a01b0390811661016084015260208501511661018083015260408401516001600160801b03166101a08301526060840151600290810b6101c08401526080850151810b6101e084015260a0850151900b61020083015260c0840151151561022083015261256d610240830184611dea565b98975050505050505050565b600060a0828403121561258b57600080fd5b6119a68383611fe9565b6000602082840312156125a757600080fd5b81516119a68161189a565b6000815180845260005b818110156125d8576020818501810151868301820152016125bc565b818111156125ea576000602083870101525b50601f01601f19169290920160200192915050565b61036080825286516001600160a01b039081169183019190915260208701511661038082015260408601516001600160801b03166103a0820152606086015115156103c0820152608086015115156103e082015260a086015160c06104008301526000906126716104208401826125b2565b915050612681602083018761232b565b8461030083015283610320830152826103408301529695505050505050565b600080604083850312156126b357600080fd5b505080516020909101519092909150565b80515160ff16825260208101516126de6020840182611b2c565b5060408101516126f160c0840182611dea565b50606081015161018061270681850183611e3d565b6080830151915061271b610260850183611e3d565b60a0830151915061273061034085018361232b565b60c083015161062085015260e08301516106408501526101008301516106608501526101208301516106808501526101408301516106a08501526101608301516106c08501528201516106e0840152506101a0810151611ee861070084018260020b9052565b60006108c08201905060018060a01b03808b511683528060208c0151166020840152506001600160801b0360408b01511660408301526bffffffffffffffffffffffff60608b015116606083015260808a015160020b608083015260a08a015161280560a084018260020b9052565b5060c08a015161281960c084018215159052565b5061282760e083018a6126c4565b8761080083015286610820830152856108408301528461086083015283610880830152826108a08301529998505050505050505050565b80516118de816118e3565b60006102e0828403121561287c57600080fd5b612884611852565b90506128908383611f74565b815261289f836020840161206d565b60208201526128b18360e0840161213d565b60408201526101c082015160608201526101e0820151608082015261020082015160a082015261022082015160c082015261024082015160e08201526128fa6102608301611fca565b61010082015261290d6102808301612132565b6101208201526129206102a0830161285e565b6101408201526129336102c0830161285e565b61016082015292915050565b6000610720828403121561295257600080fd5b61295a611876565b6129648484611f74565b81526129738460208501611fe9565b60208201526129858460c0850161206d565b60408201526101806129998582860161213d565b60608301526129ac85610260860161213d565b60808301526129bf856103408601612869565b60a083015261062084015160c083015261064084015160e08301526106608401516101008301526106808401516101208301526106a08401516101408301526106c08401516101608301526106e084015190820152612a216107008401612132565b6101a08201529392505050565b600060208284031215612a4057600080fd5b81516119a6816118e356fea264697066735822122034716a47a15bb394243c70389f2f84d15db5e25b43eacffa82c8e3fb1f34454d64736f6c634300080d0033';

type LimitPoolConstructorParams =
  | [linkLibraryAddresses: LimitPoolLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: LimitPoolConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === 'string' ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    '_isInterface' in xs[0]
  );
};

export class LimitPool__factory extends ContractFactory {
  constructor(...args: LimitPoolConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(
        _abi,
        LimitPool__factory.linkBytecode(linkLibraryAddresses),
        signer,
      );
    }
  }

  static linkBytecode(linkLibraryAddresses: LimitPoolLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp('__\\$5dad83152cc730ce53bb65fb4ae6d99ea9\\$__', 'g'),
      linkLibraryAddresses['contracts/libraries/pool/BurnCall.sol:BurnCall']
        .replace(/^0x/, '')
        .toLowerCase(),
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp('__\\$dc25dd3a5fe6a540f35c01c335c2ccfd23\\$__', 'g'),
      linkLibraryAddresses['contracts/libraries/Ticks.sol:Ticks']
        .replace(/^0x/, '')
        .toLowerCase(),
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp('__\\$9e4c229d336278bda7a6b638eb4f56779a\\$__', 'g'),
      linkLibraryAddresses['contracts/libraries/pool/QuoteCall.sol:QuoteCall']
        .replace(/^0x/, '')
        .toLowerCase(),
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp('__\\$76cc67c47c6cd8fa14026cc00c5aa66f37\\$__', 'g'),
      linkLibraryAddresses['contracts/libraries/Positions.sol:Positions']
        .replace(/^0x/, '')
        .toLowerCase(),
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp('__\\$8397ab196537c2cfcd89b6140849e98c7e\\$__', 'g'),
      linkLibraryAddresses['contracts/libraries/pool/SwapCall.sol:SwapCall']
        .replace(/^0x/, '')
        .toLowerCase(),
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp('__\\$007bbb7dd8ce8caff62f844d2fbd2823ce\\$__', 'g'),
      linkLibraryAddresses['contracts/libraries/pool/MintCall.sol:MintCall']
        .replace(/^0x/, '')
        .toLowerCase(),
    );

    return linkedBytecode;
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<LimitPool> {
    return super.deploy(overrides || {}) as Promise<LimitPool>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): LimitPool {
    return super.attach(address) as LimitPool;
  }
  connect(signer: Signer): LimitPool__factory {
    return super.connect(signer) as LimitPool__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): LimitPoolInterface {
    return new utils.Interface(_abi) as LimitPoolInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): LimitPool {
    return new Contract(address, _abi, signerOrProvider) as LimitPool;
  }
}

export interface LimitPoolLibraryAddresses {
  ['contracts/libraries/pool/BurnCall.sol:BurnCall']: string;
  ['contracts/libraries/Ticks.sol:Ticks']: string;
  ['contracts/libraries/pool/QuoteCall.sol:QuoteCall']: string;
  ['contracts/libraries/Positions.sol:Positions']: string;
  ['contracts/libraries/pool/SwapCall.sol:SwapCall']: string;
  ['contracts/libraries/pool/MintCall.sol:MintCall']: string;
}
