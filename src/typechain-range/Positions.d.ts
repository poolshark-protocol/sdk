/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface PositionsInterface extends ethers.utils.Interface {
  functions: {
    "id(int24,int24)": FunctionFragment;
    "rangeFeeGrowth(address,int24,int24)": FunctionFragment;
    "snapshot(address,address,int24,int24)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "id",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rangeFeeGrowth",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "snapshot",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "id", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "rangeFeeGrowth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "snapshot", data: BytesLike): Result;

  events: {
    "Burn(address,int24,int24,uint256,uint128,uint128,uint128,uint128)": EventFragment;
    "Compound(int24,int24,uint128,uint128,uint128)": EventFragment;
    "Mint(address,int24,int24,uint256,uint128,uint128,uint128,uint128)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Compound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    recipient: string;
    lower: number;
    upper: number;
    tokenId: BigNumber;
    tokenBurned: BigNumber;
    liquidityBurned: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type CompoundEvent = TypedEvent<
  [number, number, BigNumber, BigNumber, BigNumber] & {
    lower: number;
    upper: number;
    liquidityCompounded: BigNumber;
    positionAmount0: BigNumber;
    positionAmount1: BigNumber;
  }
>;

export type MintEvent = TypedEvent<
  [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    recipient: string;
    lower: number;
    upper: number;
    tokenId: BigNumber;
    tokenMinted: BigNumber;
    liquidityMinted: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export class Positions extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: PositionsInterface;

  functions: {
    id(
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    rangeFeeGrowth(
      pool: string,
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
      }
    >;

    snapshot(
      pool: string,
      owner: string,
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tickSecondsAccum: BigNumber;
        secondsPerLiquidityAccum: BigNumber;
        feesOwed0: BigNumber;
        feesOwed1: BigNumber;
      }
    >;
  };

  id(
    lower: BigNumberish,
    upper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rangeFeeGrowth(
    pool: string,
    lower: BigNumberish,
    upper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber] & {
      feeGrowthInside0: BigNumber;
      feeGrowthInside1: BigNumber;
    }
  >;

  snapshot(
    pool: string,
    owner: string,
    lower: BigNumberish,
    upper: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      tickSecondsAccum: BigNumber;
      secondsPerLiquidityAccum: BigNumber;
      feesOwed0: BigNumber;
      feesOwed1: BigNumber;
    }
  >;

  callStatic: {
    id(
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rangeFeeGrowth(
      pool: string,
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & {
        feeGrowthInside0: BigNumber;
        feeGrowthInside1: BigNumber;
      }
    >;

    snapshot(
      pool: string,
      owner: string,
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tickSecondsAccum: BigNumber;
        secondsPerLiquidityAccum: BigNumber;
        feesOwed0: BigNumber;
        feesOwed1: BigNumber;
      }
    >;
  };

  filters: {
    "Burn(address,int24,int24,uint256,uint128,uint128,uint128,uint128)"(
      recipient?: string | null,
      lower?: null,
      upper?: null,
      tokenId?: BigNumberish | null,
      tokenBurned?: null,
      liquidityBurned?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        recipient: string;
        lower: number;
        upper: number;
        tokenId: BigNumber;
        tokenBurned: BigNumber;
        liquidityBurned: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Burn(
      recipient?: string | null,
      lower?: null,
      upper?: null,
      tokenId?: BigNumberish | null,
      tokenBurned?: null,
      liquidityBurned?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        recipient: string;
        lower: number;
        upper: number;
        tokenId: BigNumber;
        tokenBurned: BigNumber;
        liquidityBurned: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "Compound(int24,int24,uint128,uint128,uint128)"(
      lower?: BigNumberish | null,
      upper?: BigNumberish | null,
      liquidityCompounded?: null,
      positionAmount0?: null,
      positionAmount1?: null
    ): TypedEventFilter<
      [number, number, BigNumber, BigNumber, BigNumber],
      {
        lower: number;
        upper: number;
        liquidityCompounded: BigNumber;
        positionAmount0: BigNumber;
        positionAmount1: BigNumber;
      }
    >;

    Compound(
      lower?: BigNumberish | null,
      upper?: BigNumberish | null,
      liquidityCompounded?: null,
      positionAmount0?: null,
      positionAmount1?: null
    ): TypedEventFilter<
      [number, number, BigNumber, BigNumber, BigNumber],
      {
        lower: number;
        upper: number;
        liquidityCompounded: BigNumber;
        positionAmount0: BigNumber;
        positionAmount1: BigNumber;
      }
    >;

    "Mint(address,int24,int24,uint256,uint128,uint128,uint128,uint128)"(
      recipient?: string | null,
      lower?: null,
      upper?: null,
      tokenId?: BigNumberish | null,
      tokenMinted?: null,
      liquidityMinted?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        recipient: string;
        lower: number;
        upper: number;
        tokenId: BigNumber;
        tokenMinted: BigNumber;
        liquidityMinted: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Mint(
      recipient?: string | null,
      lower?: null,
      upper?: null,
      tokenId?: BigNumberish | null,
      tokenMinted?: null,
      liquidityMinted?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        recipient: string;
        lower: number;
        upper: number;
        tokenId: BigNumber;
        tokenMinted: BigNumber;
        liquidityMinted: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;
  };

  estimateGas: {
    id(
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rangeFeeGrowth(
      pool: string,
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    snapshot(
      pool: string,
      owner: string,
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    id(
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rangeFeeGrowth(
      pool: string,
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    snapshot(
      pool: string,
      owner: string,
      lower: BigNumberish,
      upper: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
