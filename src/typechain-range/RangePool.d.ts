/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RangePoolInterface extends ethers.utils.Interface {
  functions: {
    "balanceOf(address,uint256)": FunctionFragment;
    "balanceOfBatch(address[],uint256[])": FunctionFragment;
    "burn((address,int24,int24,uint128))": FunctionFragment;
    "burnFungible(address,uint256,uint256)": FunctionFragment;
    "fees(uint16,bool)": FunctionFragment;
    "increaseSampleLength(uint16)": FunctionFragment;
    "isApprovedForAll(address,address)": FunctionFragment;
    "mint((address,int24,int24,uint128,uint128))": FunctionFragment;
    "mintFungible(address,uint256,uint256)": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "poolState()": FunctionFragment;
    "positions(int24,int24)": FunctionFragment;
    "quote((uint160,uint128,bool,bool))": FunctionFragment;
    "safeBatchTransferFrom(address,address,uint256[],uint256[])": FunctionFragment;
    "safeTransferFrom(address,address,uint256,uint256)": FunctionFragment;
    "sample(uint32[])": FunctionFragment;
    "samples(uint256)": FunctionFragment;
    "setApprovalForAll(address,bool)": FunctionFragment;
    "snapshot((address,int24,int24))": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "swap((address,uint160,uint128,bool,bool,bytes))": FunctionFragment;
    "swapFee()": FunctionFragment;
    "symbol()": FunctionFragment;
    "tickMap()": FunctionFragment;
    "tickSpacing()": FunctionFragment;
    "ticks(int24)": FunctionFragment;
    "token0()": FunctionFragment;
    "token1()": FunctionFragment;
    "totalSupply(uint256)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "balanceOf",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "balanceOfBatch",
    values: [string[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "burn",
    values: [
      {
        to: string;
        lower: BigNumberish;
        upper: BigNumberish;
        burnPercent: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "burnFungible",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "fees",
    values: [BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "increaseSampleLength",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isApprovedForAll",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "mint",
    values: [
      {
        to: string;
        lower: BigNumberish;
        upper: BigNumberish;
        amount0: BigNumberish;
        amount1: BigNumberish;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mintFungible",
    values: [string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "poolState", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "positions",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [
      {
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
      }
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "safeBatchTransferFrom",
    values: [string, string, BigNumberish[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "safeTransferFrom",
    values: [string, string, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "sample",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "samples",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setApprovalForAll",
    values: [string, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "snapshot",
    values: [{ owner: string; lower: BigNumberish; upper: BigNumberish }]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "swap",
    values: [
      {
        to: string;
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
        callbackData: BytesLike;
      }
    ]
  ): string;
  encodeFunctionData(functionFragment: "swapFee", values?: undefined): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(functionFragment: "tickMap", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tickSpacing",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "ticks", values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: "token0", values?: undefined): string;
  encodeFunctionData(functionFragment: "token1", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "balanceOfBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "burnFungible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "fees", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "increaseSampleLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isApprovedForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "mint", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "mintFungible",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "poolState", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positions", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "safeBatchTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "safeTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sample", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "samples", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setApprovalForAll",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "snapshot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swap", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "swapFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "tickMap", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tickSpacing",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ticks", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token0", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "token1", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;

  events: {
    "ApprovalForAll(address,address,bool)": EventFragment;
    "TransferBatch(address,address,address,uint256[],uint256[])": EventFragment;
    "TransferSingle(address,address,address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ApprovalForAll"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferBatch"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferSingle"): EventFragment;
}

export type ApprovalForAllEvent = TypedEvent<
  [string, string, boolean] & {
    account: string;
    sender: string;
    approve: boolean;
  }
>;

export type TransferBatchEvent = TypedEvent<
  [string, string, string, BigNumber[], BigNumber[]] & {
    sender: string;
    from: string;
    to: string;
    ids: BigNumber[];
    amounts: BigNumber[];
  }
>;

export type TransferSingleEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber] & {
    sender: string;
    from: string;
    to: string;
    id: BigNumber;
    amount: BigNumber;
  }
>;

export class RangePool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RangePoolInterface;

  functions: {
    balanceOf(
      _account: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    balanceOfBatch(
      _accounts: string[],
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<[BigNumber[]] & { batchBalances: BigNumber[] }>;

    burn(
      params: {
        to: string;
        lower: BigNumberish;
        upper: BigNumberish;
        burnPercent: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFungible(
      _account: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    fees(
      protocolFee: BigNumberish,
      setFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    increaseSampleLength(
      sampleLengthNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    isApprovedForAll(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    mint(
      params: {
        to: string;
        lower: BigNumberish;
        upper: BigNumberish;
        amount0: BigNumberish;
        amount1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintFungible(
      _account: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    poolState(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [number, number, number] & {
          index: number;
          length: number;
          lengthNext: number;
        },
        [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
      ] & {
        unlocked: number;
        protocolFee: number;
        tickAtPrice: number;
        tickSecondsAccum: BigNumber;
        secondsPerLiquidityAccum: BigNumber;
        price: BigNumber;
        liquidity: BigNumber;
        liquidityGlobal: BigNumber;
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
        samples: [number, number, number] & {
          index: number;
          length: number;
          lengthNext: number;
        };
        protocolFees: [BigNumber, BigNumber] & {
          token0: BigNumber;
          token1: BigNumber;
        };
      }
    >;

    positions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
      }
    >;

    quote(
      params: {
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    sample(
      secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber, BigNumber, number] & {
        tickSecondsAccum: BigNumber[];
        secondsPerLiquidityAccum: BigNumber[];
        averagePrice: BigNumber;
        averageLiquidity: BigNumber;
        averageTick: number;
      }
    >;

    samples(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        blockTimestamp: number;
        tickSecondsAccum: BigNumber;
        secondsPerLiquidityAccum: BigNumber;
      }
    >;

    setApprovalForAll(
      _spender: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    snapshot(
      params: { owner: string; lower: BigNumberish; upper: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tickSecondsAccum: BigNumber;
        secondsPerLiquidityAccum: BigNumber;
        feesOwed0: BigNumber;
        feesOwed1: BigNumber;
      }
    >;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swap(
      params: {
        to: string;
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
        callbackData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    swapFee(overrides?: CallOverrides): Promise<[number]>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    tickMap(
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { blocks: BigNumber }>;

    tickSpacing(overrides?: CallOverrides): Promise<[number]>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityDelta: BigNumber;
        feeGrowthOutside0: BigNumber;
        feeGrowthOutside1: BigNumber;
        tickSecondsAccumOutside: BigNumber;
        secondsPerLiquidityAccumOutside: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<[string]>;

    token1(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;
  };

  balanceOf(
    _account: string,
    _id: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  balanceOfBatch(
    _accounts: string[],
    _ids: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<BigNumber[]>;

  burn(
    params: {
      to: string;
      lower: BigNumberish;
      upper: BigNumberish;
      burnPercent: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFungible(
    _account: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  fees(
    protocolFee: BigNumberish,
    setFee: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  increaseSampleLength(
    sampleLengthNext: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  isApprovedForAll(
    _owner: string,
    _spender: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  mint(
    params: {
      to: string;
      lower: BigNumberish;
      upper: BigNumberish;
      amount0: BigNumberish;
      amount1: BigNumberish;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintFungible(
    _account: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  poolState(
    overrides?: CallOverrides
  ): Promise<
    [
      number,
      number,
      number,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      [number, number, number] & {
        index: number;
        length: number;
        lengthNext: number;
      },
      [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
    ] & {
      unlocked: number;
      protocolFee: number;
      tickAtPrice: number;
      tickSecondsAccum: BigNumber;
      secondsPerLiquidityAccum: BigNumber;
      price: BigNumber;
      liquidity: BigNumber;
      liquidityGlobal: BigNumber;
      feeGrowthGlobal0: BigNumber;
      feeGrowthGlobal1: BigNumber;
      samples: [number, number, number] & {
        index: number;
        length: number;
        lengthNext: number;
      };
      protocolFees: [BigNumber, BigNumber] & {
        token0: BigNumber;
        token1: BigNumber;
      };
    }
  >;

  positions(
    arg0: BigNumberish,
    arg1: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidity: BigNumber;
      amount0: BigNumber;
      amount1: BigNumber;
      feeGrowthInside0Last: BigNumber;
      feeGrowthInside1Last: BigNumber;
    }
  >;

  quote(
    params: {
      priceLimit: BigNumberish;
      amount: BigNumberish;
      exactIn: boolean;
      zeroForOne: boolean;
    },
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  safeBatchTransferFrom(
    _from: string,
    _to: string,
    _ids: BigNumberish[],
    _amounts: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  safeTransferFrom(
    _from: string,
    _to: string,
    _id: BigNumberish,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  sample(
    secondsAgo: BigNumberish[],
    overrides?: CallOverrides
  ): Promise<
    [BigNumber[], BigNumber[], BigNumber, BigNumber, number] & {
      tickSecondsAccum: BigNumber[];
      secondsPerLiquidityAccum: BigNumber[];
      averagePrice: BigNumber;
      averageLiquidity: BigNumber;
      averageTick: number;
    }
  >;

  samples(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [number, BigNumber, BigNumber] & {
      blockTimestamp: number;
      tickSecondsAccum: BigNumber;
      secondsPerLiquidityAccum: BigNumber;
    }
  >;

  setApprovalForAll(
    _spender: string,
    _approved: boolean,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  snapshot(
    params: { owner: string; lower: BigNumberish; upper: BigNumberish },
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      tickSecondsAccum: BigNumber;
      secondsPerLiquidityAccum: BigNumber;
      feesOwed0: BigNumber;
      feesOwed1: BigNumber;
    }
  >;

  supportsInterface(
    interfaceID: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  swap(
    params: {
      to: string;
      priceLimit: BigNumberish;
      amount: BigNumberish;
      exactIn: boolean;
      zeroForOne: boolean;
      callbackData: BytesLike;
    },
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  swapFee(overrides?: CallOverrides): Promise<number>;

  symbol(overrides?: CallOverrides): Promise<string>;

  tickMap(overrides?: CallOverrides): Promise<BigNumber>;

  tickSpacing(overrides?: CallOverrides): Promise<number>;

  ticks(
    arg0: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
      liquidityDelta: BigNumber;
      feeGrowthOutside0: BigNumber;
      feeGrowthOutside1: BigNumber;
      tickSecondsAccumOutside: BigNumber;
      secondsPerLiquidityAccumOutside: BigNumber;
    }
  >;

  token0(overrides?: CallOverrides): Promise<string>;

  token1(overrides?: CallOverrides): Promise<string>;

  totalSupply(_id: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    balanceOf(
      _account: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      _accounts: string[],
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    burn(
      params: {
        to: string;
        lower: BigNumberish;
        upper: BigNumberish;
        burnPercent: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    burnFungible(
      _account: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    fees(
      protocolFee: BigNumberish,
      setFee: boolean,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { token0Fees: BigNumber; token1Fees: BigNumber }
    >;

    increaseSampleLength(
      sampleLengthNext: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    isApprovedForAll(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    mint(
      params: {
        to: string;
        lower: BigNumberish;
        upper: BigNumberish;
        amount0: BigNumberish;
        amount1: BigNumberish;
      },
      overrides?: CallOverrides
    ): Promise<void>;

    mintFungible(
      _account: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    poolState(
      overrides?: CallOverrides
    ): Promise<
      [
        number,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        [number, number, number] & {
          index: number;
          length: number;
          lengthNext: number;
        },
        [BigNumber, BigNumber] & { token0: BigNumber; token1: BigNumber }
      ] & {
        unlocked: number;
        protocolFee: number;
        tickAtPrice: number;
        tickSecondsAccum: BigNumber;
        secondsPerLiquidityAccum: BigNumber;
        price: BigNumber;
        liquidity: BigNumber;
        liquidityGlobal: BigNumber;
        feeGrowthGlobal0: BigNumber;
        feeGrowthGlobal1: BigNumber;
        samples: [number, number, number] & {
          index: number;
          length: number;
          lengthNext: number;
        };
        protocolFees: [BigNumber, BigNumber] & {
          token0: BigNumber;
          token1: BigNumber;
        };
      }
    >;

    positions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidity: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
        feeGrowthInside0Last: BigNumber;
        feeGrowthInside1Last: BigNumber;
      }
    >;

    quote(
      params: {
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    sample(
      secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<
      [BigNumber[], BigNumber[], BigNumber, BigNumber, number] & {
        tickSecondsAccum: BigNumber[];
        secondsPerLiquidityAccum: BigNumber[];
        averagePrice: BigNumber;
        averageLiquidity: BigNumber;
        averageTick: number;
      }
    >;

    samples(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [number, BigNumber, BigNumber] & {
        blockTimestamp: number;
        tickSecondsAccum: BigNumber;
        secondsPerLiquidityAccum: BigNumber;
      }
    >;

    setApprovalForAll(
      _spender: string,
      _approved: boolean,
      overrides?: CallOverrides
    ): Promise<void>;

    snapshot(
      params: { owner: string; lower: BigNumberish; upper: BigNumberish },
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        tickSecondsAccum: BigNumber;
        secondsPerLiquidityAccum: BigNumber;
        feesOwed0: BigNumber;
        feesOwed1: BigNumber;
      }
    >;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    swap(
      params: {
        to: string;
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
        callbackData: BytesLike;
      },
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    swapFee(overrides?: CallOverrides): Promise<number>;

    symbol(overrides?: CallOverrides): Promise<string>;

    tickMap(overrides?: CallOverrides): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<number>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber] & {
        liquidityDelta: BigNumber;
        feeGrowthOutside0: BigNumber;
        feeGrowthOutside1: BigNumber;
        tickSecondsAccumOutside: BigNumber;
        secondsPerLiquidityAccumOutside: BigNumber;
      }
    >;

    token0(overrides?: CallOverrides): Promise<string>;

    token1(overrides?: CallOverrides): Promise<string>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "ApprovalForAll(address,address,bool)"(
      account?: string | null,
      sender?: string | null,
      approve?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; sender: string; approve: boolean }
    >;

    ApprovalForAll(
      account?: string | null,
      sender?: string | null,
      approve?: null
    ): TypedEventFilter<
      [string, string, boolean],
      { account: string; sender: string; approve: boolean }
    >;

    "TransferBatch(address,address,address,uint256[],uint256[])"(
      sender?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      amounts?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        sender: string;
        from: string;
        to: string;
        ids: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    TransferBatch(
      sender?: string | null,
      from?: string | null,
      to?: string | null,
      ids?: null,
      amounts?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber[], BigNumber[]],
      {
        sender: string;
        from: string;
        to: string;
        ids: BigNumber[];
        amounts: BigNumber[];
      }
    >;

    "TransferSingle(address,address,address,uint256,uint256)"(
      sender?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        sender: string;
        from: string;
        to: string;
        id: BigNumber;
        amount: BigNumber;
      }
    >;

    TransferSingle(
      sender?: string | null,
      from?: string | null,
      to?: string | null,
      id?: null,
      amount?: null
    ): TypedEventFilter<
      [string, string, string, BigNumber, BigNumber],
      {
        sender: string;
        from: string;
        to: string;
        id: BigNumber;
        amount: BigNumber;
      }
    >;
  };

  estimateGas: {
    balanceOf(
      _account: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    balanceOfBatch(
      _accounts: string[],
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    burn(
      params: {
        to: string;
        lower: BigNumberish;
        upper: BigNumberish;
        burnPercent: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFungible(
      _account: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    fees(
      protocolFee: BigNumberish,
      setFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    increaseSampleLength(
      sampleLengthNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    isApprovedForAll(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    mint(
      params: {
        to: string;
        lower: BigNumberish;
        upper: BigNumberish;
        amount0: BigNumberish;
        amount1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintFungible(
      _account: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    poolState(overrides?: CallOverrides): Promise<BigNumber>;

    positions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      params: {
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    sample(
      secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    samples(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    setApprovalForAll(
      _spender: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    snapshot(
      params: { owner: string; lower: BigNumberish; upper: BigNumberish },
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swap(
      params: {
        to: string;
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
        callbackData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    swapFee(overrides?: CallOverrides): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    tickMap(overrides?: CallOverrides): Promise<BigNumber>;

    tickSpacing(overrides?: CallOverrides): Promise<BigNumber>;

    ticks(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    token0(overrides?: CallOverrides): Promise<BigNumber>;

    token1(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    balanceOf(
      _account: string,
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    balanceOfBatch(
      _accounts: string[],
      _ids: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      params: {
        to: string;
        lower: BigNumberish;
        upper: BigNumberish;
        burnPercent: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFungible(
      _account: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    fees(
      protocolFee: BigNumberish,
      setFee: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    increaseSampleLength(
      sampleLengthNext: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    isApprovedForAll(
      _owner: string,
      _spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    mint(
      params: {
        to: string;
        lower: BigNumberish;
        upper: BigNumberish;
        amount0: BigNumberish;
        amount1: BigNumberish;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintFungible(
      _account: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    poolState(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positions(
      arg0: BigNumberish,
      arg1: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    quote(
      params: {
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
      },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    safeBatchTransferFrom(
      _from: string,
      _to: string,
      _ids: BigNumberish[],
      _amounts: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    safeTransferFrom(
      _from: string,
      _to: string,
      _id: BigNumberish,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    sample(
      secondsAgo: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    samples(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setApprovalForAll(
      _spender: string,
      _approved: boolean,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    snapshot(
      params: { owner: string; lower: BigNumberish; upper: BigNumberish },
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceID: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swap(
      params: {
        to: string;
        priceLimit: BigNumberish;
        amount: BigNumberish;
        exactIn: boolean;
        zeroForOne: boolean;
        callbackData: BytesLike;
      },
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    swapFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickMap(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tickSpacing(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    ticks(
      arg0: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    token0(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    token1(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(
      _id: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
