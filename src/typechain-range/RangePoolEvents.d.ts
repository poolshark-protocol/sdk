/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface RangePoolEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    "Burn(address,int24,int24,uint256,uint128,uint128,uint128,uint128)": EventFragment;
    "Compound(int24,int24,uint128,uint128,uint128)": EventFragment;
    "Initialize(uint160,int24,int24,int24)": EventFragment;
    "Mint(address,int24,int24,uint256,uint128,uint128,uint128,uint128)": EventFragment;
    "Swap(address,bool,uint256,uint256,uint160,uint128,int24)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Burn"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Compound"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialize"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Mint"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export type BurnEvent = TypedEvent<
  [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    recipient: string;
    lower: number;
    upper: number;
    tokenId: BigNumber;
    tokenBurned: BigNumber;
    liquidityBurned: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type CompoundEvent = TypedEvent<
  [number, number, BigNumber, BigNumber, BigNumber] & {
    lower: number;
    upper: number;
    liquidityCompounded: BigNumber;
    positionAmount0: BigNumber;
    positionAmount1: BigNumber;
  }
>;

export type InitializeEvent = TypedEvent<
  [BigNumber, number, number, number] & {
    startPrice: BigNumber;
    tickAtPrice: number;
    minTick: number;
    maxTick: number;
  }
>;

export type MintEvent = TypedEvent<
  [
    string,
    number,
    number,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    recipient: string;
    lower: number;
    upper: number;
    tokenId: BigNumber;
    tokenMinted: BigNumber;
    liquidityMinted: BigNumber;
    amount0: BigNumber;
    amount1: BigNumber;
  }
>;

export type SwapEvent = TypedEvent<
  [string, boolean, BigNumber, BigNumber, BigNumber, BigNumber, number] & {
    recipient: string;
    zeroForOne: boolean;
    amountIn: BigNumber;
    amountOut: BigNumber;
    price: BigNumber;
    liquidity: BigNumber;
    tickAtPrice: number;
  }
>;

export class RangePoolEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RangePoolEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    "Burn(address,int24,int24,uint256,uint128,uint128,uint128,uint128)"(
      recipient?: string | null,
      lower?: null,
      upper?: null,
      tokenId?: BigNumberish | null,
      tokenBurned?: null,
      liquidityBurned?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        recipient: string;
        lower: number;
        upper: number;
        tokenId: BigNumber;
        tokenBurned: BigNumber;
        liquidityBurned: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Burn(
      recipient?: string | null,
      lower?: null,
      upper?: null,
      tokenId?: BigNumberish | null,
      tokenBurned?: null,
      liquidityBurned?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        recipient: string;
        lower: number;
        upper: number;
        tokenId: BigNumber;
        tokenBurned: BigNumber;
        liquidityBurned: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "Compound(int24,int24,uint128,uint128,uint128)"(
      lower?: BigNumberish | null,
      upper?: BigNumberish | null,
      liquidityCompounded?: null,
      positionAmount0?: null,
      positionAmount1?: null
    ): TypedEventFilter<
      [number, number, BigNumber, BigNumber, BigNumber],
      {
        lower: number;
        upper: number;
        liquidityCompounded: BigNumber;
        positionAmount0: BigNumber;
        positionAmount1: BigNumber;
      }
    >;

    Compound(
      lower?: BigNumberish | null,
      upper?: BigNumberish | null,
      liquidityCompounded?: null,
      positionAmount0?: null,
      positionAmount1?: null
    ): TypedEventFilter<
      [number, number, BigNumber, BigNumber, BigNumber],
      {
        lower: number;
        upper: number;
        liquidityCompounded: BigNumber;
        positionAmount0: BigNumber;
        positionAmount1: BigNumber;
      }
    >;

    "Initialize(uint160,int24,int24,int24)"(
      startPrice?: null,
      tickAtPrice?: null,
      minTick?: null,
      maxTick?: null
    ): TypedEventFilter<
      [BigNumber, number, number, number],
      {
        startPrice: BigNumber;
        tickAtPrice: number;
        minTick: number;
        maxTick: number;
      }
    >;

    Initialize(
      startPrice?: null,
      tickAtPrice?: null,
      minTick?: null,
      maxTick?: null
    ): TypedEventFilter<
      [BigNumber, number, number, number],
      {
        startPrice: BigNumber;
        tickAtPrice: number;
        minTick: number;
        maxTick: number;
      }
    >;

    "Mint(address,int24,int24,uint256,uint128,uint128,uint128,uint128)"(
      recipient?: string | null,
      lower?: null,
      upper?: null,
      tokenId?: BigNumberish | null,
      tokenMinted?: null,
      liquidityMinted?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        recipient: string;
        lower: number;
        upper: number;
        tokenId: BigNumber;
        tokenMinted: BigNumber;
        liquidityMinted: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    Mint(
      recipient?: string | null,
      lower?: null,
      upper?: null,
      tokenId?: BigNumberish | null,
      tokenMinted?: null,
      liquidityMinted?: null,
      amount0?: null,
      amount1?: null
    ): TypedEventFilter<
      [
        string,
        number,
        number,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ],
      {
        recipient: string;
        lower: number;
        upper: number;
        tokenId: BigNumber;
        tokenMinted: BigNumber;
        liquidityMinted: BigNumber;
        amount0: BigNumber;
        amount1: BigNumber;
      }
    >;

    "Swap(address,bool,uint256,uint256,uint160,uint128,int24)"(
      recipient?: string | null,
      zeroForOne?: null,
      amountIn?: null,
      amountOut?: null,
      price?: null,
      liquidity?: null,
      tickAtPrice?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber, BigNumber, BigNumber, BigNumber, number],
      {
        recipient: string;
        zeroForOne: boolean;
        amountIn: BigNumber;
        amountOut: BigNumber;
        price: BigNumber;
        liquidity: BigNumber;
        tickAtPrice: number;
      }
    >;

    Swap(
      recipient?: string | null,
      zeroForOne?: null,
      amountIn?: null,
      amountOut?: null,
      price?: null,
      liquidity?: null,
      tickAtPrice?: null
    ): TypedEventFilter<
      [string, boolean, BigNumber, BigNumber, BigNumber, BigNumber, number],
      {
        recipient: string;
        zeroForOne: boolean;
        amountIn: BigNumber;
        amountOut: BigNumber;
        price: BigNumber;
        liquidity: BigNumber;
        tickAtPrice: number;
      }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
