/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface RangePoolManagerInterface extends ethers.utils.Interface {
  functions: {
    '_owner()': FunctionFragment;
    'collectTopPools(address[])': FunctionFragment;
    'enableFeeTier(uint16,int24)': FunctionFragment;
    'factory()': FunctionFragment;
    'feeTiers(uint16)': FunctionFragment;
    'feeTo()': FunctionFragment;
    'owner()': FunctionFragment;
    'protocolFees(address)': FunctionFragment;
    'setFactory(address)': FunctionFragment;
    'setTopPools(address[],address[],uint16)': FunctionFragment;
    'transferFeeTo(address)': FunctionFragment;
    'transferOwner(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: '_owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'collectTopPools',
    values: [string[]],
  ): string;
  encodeFunctionData(
    functionFragment: 'enableFeeTier',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'factory', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'feeTiers',
    values: [BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'feeTo', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'protocolFees',
    values: [string],
  ): string;
  encodeFunctionData(functionFragment: 'setFactory', values: [string]): string;
  encodeFunctionData(
    functionFragment: 'setTopPools',
    values: [string[], string[], BigNumberish],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferFeeTo',
    values: [string],
  ): string;
  encodeFunctionData(
    functionFragment: 'transferOwner',
    values: [string],
  ): string;

  decodeFunctionResult(functionFragment: '_owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'collectTopPools',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'enableFeeTier',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'factory', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeTiers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'feeTo', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'protocolFees',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(functionFragment: 'setFactory', data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: 'setTopPools',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferFeeTo',
    data: BytesLike,
  ): Result;
  decodeFunctionResult(
    functionFragment: 'transferOwner',
    data: BytesLike,
  ): Result;

  events: {
    'FactoryChanged(address,address)': EventFragment;
    'FeeTierEnabled(uint16,int24)': EventFragment;
    'FeeToTransfer(address,address)': EventFragment;
    'OwnerTransfer(address,address)': EventFragment;
    'ProtocolFeeCollected(address[],uint128[],uint128[])': EventFragment;
    'ProtocolFeeUpdated(address[],uint16)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FactoryChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeTierEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeToTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeCollected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeUpdated'): EventFragment;
}

export type FactoryChangedEvent = TypedEvent<
  [string, string] & { previousFactory: string; newFactory: string }
>;

export type FeeTierEnabledEvent = TypedEvent<
  [number, number] & { swapFee: number; tickSpacing: number }
>;

export type FeeToTransferEvent = TypedEvent<
  [string, string] & { previousFeeTo: string; newFeeTo: string }
>;

export type OwnerTransferEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProtocolFeeCollectedEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]] & {
    pool: string[];
    token0Fees: BigNumber[];
    token1Fees: BigNumber[];
  }
>;

export type ProtocolFeeUpdatedEvent = TypedEvent<
  [string[], number] & { pool: string[]; protocolFee: number }
>;

export class RangePoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RangePoolManagerInterface;

  functions: {
    _owner(overrides?: CallOverrides): Promise<[string]>;

    collectTopPools(
      collectPools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableFeeTier(
      swapFee: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    factory(overrides?: CallOverrides): Promise<[string]>;

    feeTiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<[number]>;

    feeTo(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    protocolFees(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    setFactory(
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTopPools(
      removePools: string[],
      addPools: string[],
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferFeeTo(
      newFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  _owner(overrides?: CallOverrides): Promise<string>;

  collectTopPools(
    collectPools: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableFeeTier(
    swapFee: BigNumberish,
    tickSpacing: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  factory(overrides?: CallOverrides): Promise<string>;

  feeTiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

  feeTo(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  protocolFees(arg0: string, overrides?: CallOverrides): Promise<number>;

  setFactory(
    factory_: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTopPools(
    removePools: string[],
    addPools: string[],
    protocolFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferFeeTo(
    newFeeTo: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwner(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    _owner(overrides?: CallOverrides): Promise<string>;

    collectTopPools(
      collectPools: string[],
      overrides?: CallOverrides,
    ): Promise<void>;

    enableFeeTier(
      swapFee: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    factory(overrides?: CallOverrides): Promise<string>;

    feeTiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<number>;

    feeTo(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    protocolFees(arg0: string, overrides?: CallOverrides): Promise<number>;

    setFactory(factory_: string, overrides?: CallOverrides): Promise<void>;

    setTopPools(
      removePools: string[],
      addPools: string[],
      protocolFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferFeeTo(newFeeTo: string, overrides?: CallOverrides): Promise<void>;

    transferOwner(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'FactoryChanged(address,address)'(
      previousFactory?: string | null,
      newFactory?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousFactory: string; newFactory: string }
    >;

    FactoryChanged(
      previousFactory?: string | null,
      newFactory?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousFactory: string; newFactory: string }
    >;

    'FeeTierEnabled(uint16,int24)'(
      swapFee?: null,
      tickSpacing?: null,
    ): TypedEventFilter<
      [number, number],
      { swapFee: number; tickSpacing: number }
    >;

    FeeTierEnabled(
      swapFee?: null,
      tickSpacing?: null,
    ): TypedEventFilter<
      [number, number],
      { swapFee: number; tickSpacing: number }
    >;

    'FeeToTransfer(address,address)'(
      previousFeeTo?: string | null,
      newFeeTo?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousFeeTo: string; newFeeTo: string }
    >;

    FeeToTransfer(
      previousFeeTo?: string | null,
      newFeeTo?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousFeeTo: string; newFeeTo: string }
    >;

    'OwnerTransfer(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnerTransfer(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    'ProtocolFeeCollected(address[],uint128[],uint128[])'(
      pool?: null,
      token0Fees?: null,
      token1Fees?: null,
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { pool: string[]; token0Fees: BigNumber[]; token1Fees: BigNumber[] }
    >;

    ProtocolFeeCollected(
      pool?: null,
      token0Fees?: null,
      token1Fees?: null,
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { pool: string[]; token0Fees: BigNumber[]; token1Fees: BigNumber[] }
    >;

    'ProtocolFeeUpdated(address[],uint16)'(
      pool?: null,
      protocolFee?: null,
    ): TypedEventFilter<
      [string[], number],
      { pool: string[]; protocolFee: number }
    >;

    ProtocolFeeUpdated(
      pool?: null,
      protocolFee?: null,
    ): TypedEventFilter<
      [string[], number],
      { pool: string[]; protocolFee: number }
    >;
  };

  estimateGas: {
    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    collectTopPools(
      collectPools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enableFeeTier(
      swapFee: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    factory(overrides?: CallOverrides): Promise<BigNumber>;

    feeTiers(arg0: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    protocolFees(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    setFactory(
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTopPools(
      removePools: string[],
      addPools: string[],
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferFeeTo(
      newFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectTopPools(
      collectPools: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableFeeTier(
      swapFee: BigNumberish,
      tickSpacing: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    feeTiers(
      arg0: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    protocolFees(
      arg0: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    setFactory(
      factory_: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTopPools(
      removePools: string[],
      addPools: string[],
      protocolFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferFeeTo(
      newFeeTo: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwner(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
