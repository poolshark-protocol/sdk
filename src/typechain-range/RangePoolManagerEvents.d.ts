/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
} from 'ethers';
import { BytesLike } from '@ethersproject/bytes';
import { Listener, Provider } from '@ethersproject/providers';
import { FunctionFragment, EventFragment, Result } from '@ethersproject/abi';
import type { TypedEventFilter, TypedEvent, TypedListener } from './common';

interface RangePoolManagerEventsInterface extends ethers.utils.Interface {
  functions: {};

  events: {
    'FactoryChanged(address,address)': EventFragment;
    'FeeTierEnabled(uint16,int24)': EventFragment;
    'FeeToTransfer(address,address)': EventFragment;
    'OwnerTransfer(address,address)': EventFragment;
    'ProtocolFeeCollected(address[],uint128[],uint128[])': EventFragment;
    'ProtocolFeeUpdated(address[],uint16)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'FactoryChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeTierEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'FeeToTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnerTransfer'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeCollected'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'ProtocolFeeUpdated'): EventFragment;
}

export type FactoryChangedEvent = TypedEvent<
  [string, string] & { previousFactory: string; newFactory: string }
>;

export type FeeTierEnabledEvent = TypedEvent<
  [number, number] & { swapFee: number; tickSpacing: number }
>;

export type FeeToTransferEvent = TypedEvent<
  [string, string] & { previousFeeTo: string; newFeeTo: string }
>;

export type OwnerTransferEvent = TypedEvent<
  [string, string] & { previousOwner: string; newOwner: string }
>;

export type ProtocolFeeCollectedEvent = TypedEvent<
  [string[], BigNumber[], BigNumber[]] & {
    pool: string[];
    token0Fees: BigNumber[];
    token1Fees: BigNumber[];
  }
>;

export type ProtocolFeeUpdatedEvent = TypedEvent<
  [string[], number] & { pool: string[]; protocolFee: number }
>;

export class RangePoolManagerEvents extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>,
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: RangePoolManagerEventsInterface;

  functions: {};

  callStatic: {};

  filters: {
    'FactoryChanged(address,address)'(
      previousFactory?: string | null,
      newFactory?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousFactory: string; newFactory: string }
    >;

    FactoryChanged(
      previousFactory?: string | null,
      newFactory?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousFactory: string; newFactory: string }
    >;

    'FeeTierEnabled(uint16,int24)'(
      swapFee?: null,
      tickSpacing?: null,
    ): TypedEventFilter<
      [number, number],
      { swapFee: number; tickSpacing: number }
    >;

    FeeTierEnabled(
      swapFee?: null,
      tickSpacing?: null,
    ): TypedEventFilter<
      [number, number],
      { swapFee: number; tickSpacing: number }
    >;

    'FeeToTransfer(address,address)'(
      previousFeeTo?: string | null,
      newFeeTo?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousFeeTo: string; newFeeTo: string }
    >;

    FeeToTransfer(
      previousFeeTo?: string | null,
      newFeeTo?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousFeeTo: string; newFeeTo: string }
    >;

    'OwnerTransfer(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    OwnerTransfer(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): TypedEventFilter<
      [string, string],
      { previousOwner: string; newOwner: string }
    >;

    'ProtocolFeeCollected(address[],uint128[],uint128[])'(
      pool?: null,
      token0Fees?: null,
      token1Fees?: null,
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { pool: string[]; token0Fees: BigNumber[]; token1Fees: BigNumber[] }
    >;

    ProtocolFeeCollected(
      pool?: null,
      token0Fees?: null,
      token1Fees?: null,
    ): TypedEventFilter<
      [string[], BigNumber[], BigNumber[]],
      { pool: string[]; token0Fees: BigNumber[]; token1Fees: BigNumber[] }
    >;

    'ProtocolFeeUpdated(address[],uint16)'(
      pool?: null,
      protocolFee?: null,
    ): TypedEventFilter<
      [string[], number],
      { pool: string[]; protocolFee: number }
    >;

    ProtocolFeeUpdated(
      pool?: null,
      protocolFee?: null,
    ): TypedEventFilter<
      [string[], number],
      { pool: string[]; protocolFee: number }
    >;
  };

  estimateGas: {};

  populateTransaction: {};
}
