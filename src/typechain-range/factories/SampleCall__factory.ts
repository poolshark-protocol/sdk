/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SampleCall, SampleCallInterface } from "../SampleCall";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "zeroForOne",
        type: "bool",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountIn",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amountOut",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint160",
        name: "price",
        type: "uint160",
      },
      {
        indexed: false,
        internalType: "uint128",
        name: "liquidity",
        type: "uint128",
      },
      {
        indexed: false,
        internalType: "int24",
        name: "tickAtPrice",
        type: "int24",
      },
    ],
    name: "Swap",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "uint8",
            name: "unlocked",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "protocolFee",
            type: "uint16",
          },
          {
            internalType: "int24",
            name: "tickAtPrice",
            type: "int24",
          },
          {
            internalType: "int56",
            name: "tickSecondsAccum",
            type: "int56",
          },
          {
            internalType: "uint160",
            name: "secondsPerLiquidityAccum",
            type: "uint160",
          },
          {
            internalType: "uint160",
            name: "price",
            type: "uint160",
          },
          {
            internalType: "uint128",
            name: "liquidity",
            type: "uint128",
          },
          {
            internalType: "uint128",
            name: "liquidityGlobal",
            type: "uint128",
          },
          {
            internalType: "uint200",
            name: "feeGrowthGlobal0",
            type: "uint200",
          },
          {
            internalType: "uint200",
            name: "feeGrowthGlobal1",
            type: "uint200",
          },
          {
            components: [
              {
                internalType: "uint16",
                name: "index",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "length",
                type: "uint16",
              },
              {
                internalType: "uint16",
                name: "lengthNext",
                type: "uint16",
              },
            ],
            internalType: "struct IRangePoolStructs.SampleState",
            name: "samples",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint128",
                name: "token0",
                type: "uint128",
              },
              {
                internalType: "uint128",
                name: "token1",
                type: "uint128",
              },
            ],
            internalType: "struct IRangePoolStructs.ProtocolFees",
            name: "protocolFees",
            type: "tuple",
          },
        ],
        internalType: "struct IRangePoolStructs.PoolState",
        name: "state",
        type: "tuple",
      },
      {
        internalType: "uint32[]",
        name: "secondsAgo",
        type: "uint32[]",
      },
    ],
    name: "perform",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickSecondsAccum",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityAccum",
        type: "uint160[]",
      },
      {
        internalType: "uint160",
        name: "averagePrice",
        type: "uint160",
      },
      {
        internalType: "uint128",
        name: "averageLiquidity",
        type: "uint128",
      },
      {
        internalType: "int24",
        name: "averageTick",
        type: "int24",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x611a6661003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c8063ac90a96f1461003a575b600080fd5b61004d610048366004611436565b610067565b60405161005e959493929190611563565b60405180910390f35b60608060008060006100d9306040518060c001604052808a61014001516000015161ffff1681526020018a61014001516020015161ffff1681526020014263ffffffff1681526020018981526020018a6040015160020b81526020018a60c001516001600160801b03168152506100ec565b939b929a50909850965090945092505050565b6060806000806000856020015161ffff166000036101495760405162461bcd60e51b8152602060048201526015602482015274496e76616c696453616d706c654c656e677468282960581b60448201526064015b60405180910390fd5b8560600151516000036101975760405162461bcd60e51b81526020600482015260166024820152755365636f6e647341676f4172726179456d707479282960501b6044820152606401610140565b60006001876060015151116101ad5760026101b4565b8660600151515b905060008167ffffffffffffffff8111156101d1576101d16111ce565b6040519080825280602002602001820160405280156101fa578160200160208202803683370190505b5090508760600151516001036102d3576040805160028082526060820183529091602083019080368337019050509050876060015160008151811061024157610241611620565b60200260200101518160008151811061025c5761025c611620565b602002602001019063ffffffff16908163ffffffff1681525050876060015160008151811061028d5761028d611620565b602002602001015160026102a1919061164c565b816001815181106102b4576102b4611620565b602002602001019063ffffffff16908163ffffffff16815250506102da565b5060608701515b80600182516102e99190611674565b815181106102f9576102f9611620565b602002602001015163ffffffff168160008151811061031a5761031a611620565b602002602001015163ffffffff16036103755760405162461bcd60e51b815260206004820152601c60248201527f5365636f6e647341676f417272617956616c756573457175616c2829000000006044820152606401610140565b805167ffffffffffffffff81111561038f5761038f6111ce565b6040519080825280602002602001820160405280156103b8578160200160208202803683370190505b509650805167ffffffffffffffff8111156103d5576103d56111ce565b6040519080825280602002602001820160405280156103fe578160200160208202803683370190505b50955060005b8151811015610498576104318a8a84848151811061042457610424611620565b60200260200101516107b7565b89838151811061044357610443611620565b6020026020010189848151811061045c5761045c611620565b60200260200101826001600160a01b03166001600160a01b03168152508260060b60060b815250505080806104909061168b565b915050610404565b50806000815181106104ac576104ac611620565b602002602001015163ffffffff1681600183516104c99190611674565b815181106104d9576104d9611620565b602002602001015163ffffffff16111561064e578060008151811061050057610500611620565b602002602001015181600183516105179190611674565b8151811061052757610527611620565b602002602001015161053991906116a4565b60030b876001835161054b9190611674565b8151811061055b5761055b611620565b60200260200101518860008151811061057657610576611620565b602002602001015161058891906116c9565b610592919061172f565b925061059d83610964565b9450806000815181106105b2576105b2611620565b602002602001015181600183516105c99190611674565b815181106105d9576105d9611620565b60200260200101516105eb91906116a4565b63ffffffff1686600183516106009190611674565b8151811061061057610610611620565b60200260200101518760008151811061062b5761062b611620565b602002602001015161063d919061176d565b610647919061178d565b93506107ab565b806001825161065d9190611674565b8151811061066d5761066d611620565b60200260200101518160008151811061068857610688611620565b602002602001015161069a91906116a4565b60030b876000815181106106b0576106b0611620565b602002602001015188600184516106c79190611674565b815181106106d7576106d7611620565b60200260200101516106e991906116c9565b6106f3919061172f565b92506106fe83610964565b9450806001825161070f9190611674565b8151811061071f5761071f611620565b60200260200101518160008151811061073a5761073a611620565b602002602001015161074c91906116a4565b63ffffffff168660008151811061076557610765611620565b6020026020010151876001845161077c9190611674565b8151811061078c5761078c611620565b602002602001015161079e919061176d565b6107a8919061178d565b93505b50509295509295909350565b60008060006107ce86866000015161ffff16610cbd565b90508363ffffffff16600003610820574263ffffffff16816000015163ffffffff161461080c57610809814287608001518860a00151610d86565b90505b80602001518160400151925092505061095c565b600061082c85426116a4565b905060008061083d89858a86610e5b565b91509150816000015163ffffffff168363ffffffff160361086f5781602001518260400151955095505050505061095c565b806000015163ffffffff168363ffffffff160361089d5780602001518160400151955095505050505061095c565b815181516000916108ad916116a4565b83519091506000906108bf90866116a4565b60030b9050808260030b856020015185602001516108dd91906116c9565b6108e7919061172f565b6108f191906117bc565b84602001516109009190611851565b8263ffffffff168266ffffffffffffff1686604001518660400151610925919061176d565b6001600160a01b031661093891906118a0565b61094291906118bf565b856040015161095191906118d3565b975097505050505050505b935093915050565b60008060008360020b1261097b578260020b610988565b8260020b610988906118f5565b9050610997620d89e719611911565b62ffffff168111156109df5760405162461bcd60e51b81526020600482015260116024820152705469636b4f75744f66426f756e6473282960781b6044820152606401610140565b6000816001166000036109f657600160801b610a08565b6ffffcb933bd6fad37aa2d162d1a5940015b70ffffffffffffffffffffffffffffffffff1690506002821615610a3c576ffff97272373d413259a46990580e213a0260801c5b6004821615610a5b576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610a7a576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610a99576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610ab8576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610ad7576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610af6576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610b16576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610b36576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610b56576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610b76576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610b96576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610bb6576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610bd6576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610bf6576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610c17576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610c37576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610c56576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610c73576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610c94578060001981610c9057610c90611719565b0490505b640100000000810615610ca8576001610cab565b60005b60ff16602082901c0192505050919050565b60408051606081018252600080825260208201819052918101919091526000806000856001600160a01b03166307e72129866040518263ffffffff1660e01b8152600401610d0d91815260200190565b606060405180830381865afa158015610d2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d4e9190611933565b6040805160608101825263ffffffff909416845260069290920b60208401526001600160a01b03169082015293505050505b92915050565b60408051606081018252600080825260208201819052918101919091528451600090610db290866116a4565b63ffffffff16905060405180606001604052808663ffffffff1681526020018260030b8660020b610de391906117bc565b8860200151610df29190611851565b60060b81526020016000856001600160801b031611610e12576001610e14565b845b610e37906001600160801b031666ffffffffffffff60801b608086901b16611980565b8860400151610e4691906118d3565b6001600160a01b031690529695505050505050565b604080516060810182526000808252602082018190529181019190915260408051606081018252600080825260208201819052918101919091528451610ea19084610fc0565b15610efb57845163ffffffff808516911603610edd57505060408051606081018252600080825260208201819052918101919091528390610fb7565b84610ef2868587608001518860a00151610d86565b91509150610fb7565b60208401518451610f26918891610f139060016119a6565b610f1d91906119c3565b61ffff16610cbd565b805190955063ffffffff16600003610f4657610f43866000610cbd565b94505b8451610f529084610fc0565b610f9e5760405162461bcd60e51b815260206004820152601a60248201527f53616d706c654c656e6774684e6f74417661696c61626c6528290000000000006044820152606401610140565b610fb2868486600001518760200151611075565b915091505b94509492505050565b60004263ffffffff80821690851611801590610fe857508063ffffffff168363ffffffff1611155b15611005578263ffffffff168463ffffffff161115915050610d80565b63ffffffff8085169084811690831682116110395761102f63ffffffff87166401000000006119e4565b64ffffffffff1691505b8263ffffffff168563ffffffff161161106b5761106163ffffffff86166401000000006119e4565b64ffffffffff1690505b1015949350505050565b6040805160608082018352600080835260208084018290528385018290528451928301855281835282018190529281018390529091836110b68660016119a6565b6110c091906119c3565b61ffff169050600060018561ffff16836110da9190611a04565b6110e49190611674565b905060005b60026110f58385611a04565b6110ff91906118bf565b90506111188961111361ffff891684611a1c565b610cbd565b805190955063ffffffff1660000361113c57611135816001611a04565b92506110e9565b61115a8961ffff8816611150846001611a04565b6111139190611a1c565b9350600061116c86600001518a610fc0565b9050600061117e8a8760000151610fc0565b905081801561118a5750805b156111965750506111c2565b816111ad576111a6600184611674565b93506111bb565b6111b8836001611a04565b94505b50506110e9565b50505094509492505050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611208576112086111ce565b60405290565b803560ff8116811461121f57600080fd5b919050565b803561ffff8116811461121f57600080fd5b8035600281900b811461121f57600080fd5b8060060b811461125757600080fd5b50565b803561121f81611248565b6001600160a01b038116811461125757600080fd5b803561121f81611265565b80356001600160801b038116811461121f57600080fd5b80356001600160c81b038116811461121f57600080fd5b6000606082840312156112c557600080fd5b6040516060810181811067ffffffffffffffff821117156112e8576112e86111ce565b6040529050806112f783611224565b815261130560208401611224565b602082015261131660408401611224565b60408201525092915050565b60006040828403121561133457600080fd5b6040516040810181811067ffffffffffffffff82111715611357576113576111ce565b60405290508061136683611285565b815261137460208401611285565b60208201525092915050565b63ffffffff8116811461125757600080fd5b600082601f8301126113a357600080fd5b8135602067ffffffffffffffff808311156113c0576113c06111ce565b8260051b604051601f19603f830116810181811084821117156113e5576113e56111ce565b60405293845285810183019383810192508785111561140357600080fd5b83870191505b8482101561142b57813561141c81611380565b83529183019190830190611409565b979650505050505050565b60008082840361020081121561144b57600080fd5b6101e08082121561145b57600080fd5b6114636111e4565b915061146e8561120e565b825261147c60208601611224565b602083015261148d60408601611236565b604083015261149e6060860161125a565b60608301526114af6080860161127a565b60808301526114c060a0860161127a565b60a08301526114d160c08601611285565b60c08301526114e260e08601611285565b60e08301526101006114f581870161129c565b9083015261012061150786820161129c565b9083015261014061151a878783016112b3565b9083015261152c866101a08701611322565b61016083015290925083013567ffffffffffffffff81111561154d57600080fd5b61155985828601611392565b9150509250929050565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561159f57815160060b84529284019290840190600101611580565b5050508381038285015287518082528883019183019060005b818110156115dd5783516001600160a01b0316835292840192918401916001016115b8565b50506001600160a01b038816604086015292506115f8915050565b6001600160801b0384166060830152611616608083018460020b9052565b9695505050505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b600063ffffffff80831681851680830382111561166b5761166b611636565b01949350505050565b60008282101561168657611686611636565b500390565b60006001820161169d5761169d611636565b5060010190565b600063ffffffff838116908316818110156116c1576116c1611636565b039392505050565b60008160060b8360060b6000811281667fffffffffffff19018312811516156116f4576116f4611636565b81667fffffffffffff01831381161561170f5761170f611636565b5090039392505050565b634e487b7160e01b600052601260045260246000fd5b60008160060b8360060b8061174657611746611719565b667fffffffffffff1982146000198214161561176457611764611636565b90059392505050565b60006001600160a01b03838116908316818110156116c1576116c1611636565b60006001600160a01b03828116848216811515828404821116156117b3576117b3611636565b02949350505050565b60008160060b8360060b667fffffffffffff6000821360008413838304851182821616156117ec576117ec611636565b667fffffffffffff19600085128281168783058712161561180f5761180f611636565b6000871292508582058712848416161561182b5761182b611636565b8585058712818416161561184157611841611636565b5050509290910295945050505050565b60008160060b8360060b6000821282667fffffffffffff0382138115161561187b5761187b611636565b82667fffffffffffff1903821281161561189757611897611636565b50019392505050565b60008160001904831182151516156118ba576118ba611636565b500290565b6000826118ce576118ce611719565b500490565b60006001600160a01b0382811684821680830382111561166b5761166b611636565b6000600160ff1b820161190a5761190a611636565b5060000390565b60008160020b627fffff19810361192a5761192a611636565b60000392915050565b60008060006060848603121561194857600080fd5b835161195381611380565b602085015190935061196481611248565b604085015190925061197581611265565b809150509250925092565b60006001600160a01b038381168061199a5761199a611719565b92169190910492915050565b600061ffff80831681851680830382111561166b5761166b611636565b600061ffff808416806119d8576119d8611719565b92169190910692915050565b600064ffffffffff80831681851680830382111561166b5761166b611636565b60008219821115611a1757611a17611636565b500190565b600082611a2b57611a2b611719565b50069056fea26469706673582212202886de88d4d9f7f1d81e5db476058e736f0fb98360afd2beca696b3adbb0de4264736f6c634300080d0033";

export class SampleCall__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SampleCall> {
    return super.deploy(overrides || {}) as Promise<SampleCall>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SampleCall {
    return super.attach(address) as SampleCall;
  }
  connect(signer: Signer): SampleCall__factory {
    return super.connect(signer) as SampleCall__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleCallInterface {
    return new utils.Interface(_abi) as SampleCallInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleCall {
    return new Contract(address, _abi, signerOrProvider) as SampleCall;
  }
}
