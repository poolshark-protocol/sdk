/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { TickMap, TickMapInterface } from '../TickMap';

const _abi = [
  {
    inputs: [],
    name: 'BlockIndexOverflow',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TickIndexBadSpacing',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TickIndexOverflow',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TickIndexUnderflow',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'int24',
        name: 'tick',
        type: 'int24',
      },
      {
        internalType: 'int24',
        name: 'tickSpacing',
        type: 'int24',
      },
    ],
    name: 'getIndices',
    outputs: [
      {
        internalType: 'uint256',
        name: 'tickIndex',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'wordIndex',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'blockIndex',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
];

const _bytecode =
  '0x61036061003a600b82828239805160001a60731461002d57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600436106100355760003560e01c80638bea96201461003a575b600080fd5b61004d6100483660046101f6565b61006c565b6040805193845260208401929092529082015260600160405180910390f35b60008080620d89e8600286900b13156100c25760405162461bcd60e51b81526020600482015260136024820152725469636b496e6465784f766572666c6f77282960681b60448201526064015b60405180910390fd5b620d89e719600286900b12156101115760405162461bcd60e51b81526020600482015260146024820152735469636b496e646578556e646572666c6f77282960601b60448201526064016100b9565b8360020b8560020b8161012657610126610229565b0760020b1561013c5761013985856101c1565b94505b8360020b61014e620d89e719866101c1565b860360020b8161016057610160610229565b0560020b92505050600881901c601082901c60ff8111156101ba5760405162461bcd60e51b8152602060048201526014602482015273426c6f636b496e6465784f766572666c6f77282960601b60448201526064016100b9565b9250925092565b6000816101ce8185610255565b6101d8919061029d565b9392505050565b8035600281900b81146101f157600080fd5b919050565b6000806040838503121561020957600080fd5b610212836101df565b9150610220602084016101df565b90509250929050565b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b60008160020b8360020b8061027a57634e487b7160e01b600052601260045260246000fd5b627fffff198214600019821416156102945761029461023f565b90059392505050565b60008160020b8360020b627fffff6000821360008413838304851182821616156102c9576102c961023f565b627fffff1960008512828116878305871216156102e8576102e861023f565b600087129250858205871284841616156103045761030461023f565b8585058712818416161561031a5761031a61023f565b505050929091029594505050505056fea26469706673582212209fa3dc74c7cf8f936da0df86f4fca0248cb50a6626b74c1ea0de5932d37d047364736f6c634300080d0033';

export class TickMap__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<TickMap> {
    return super.deploy(overrides || {}) as Promise<TickMap>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): TickMap {
    return super.attach(address) as TickMap;
  }
  connect(signer: Signer): TickMap__factory {
    return super.connect(signer) as TickMap__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TickMapInterface {
    return new utils.Interface(_abi) as TickMapInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider,
  ): TickMap {
    return new Contract(address, _abi, signerOrProvider) as TickMap;
  }
}
