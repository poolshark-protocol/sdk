/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ICoverPoolManagerInterface extends ethers.utils.Interface {
  functions: {
    "feeTo()": FunctionFragment;
    "owner()": FunctionFragment;
    "twapSources(bytes32)": FunctionFragment;
    "volatilityTiers(bytes32,uint16,int16,uint16)": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "feeTo", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "twapSources",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "volatilityTiers",
    values: [BytesLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "feeTo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "twapSources",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "volatilityTiers",
    data: BytesLike
  ): Result;

  events: {};
}

export class ICoverPoolManager extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ICoverPoolManagerInterface;

  functions: {
    feeTo(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    twapSources(
      sourceName: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { sourceAddress: string; curveAddress: string }
    >;

    volatilityTiers(
      sourceName: BytesLike,
      feeTier: BigNumberish,
      tickSpread: BigNumberish,
      twapLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, number, number, number, number, number, boolean] & {
          minAmountPerAuction: BigNumber;
          auctionLength: number;
          blockTime: number;
          syncFee: number;
          fillFee: number;
          minPositionWidth: number;
          minAmountLowerPriced: boolean;
        }
      ]
    >;
  };

  feeTo(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  twapSources(
    sourceName: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string] & { sourceAddress: string; curveAddress: string }
  >;

  volatilityTiers(
    sourceName: BytesLike,
    feeTier: BigNumberish,
    tickSpread: BigNumberish,
    twapLength: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, number, number, number, number, number, boolean] & {
      minAmountPerAuction: BigNumber;
      auctionLength: number;
      blockTime: number;
      syncFee: number;
      fillFee: number;
      minPositionWidth: number;
      minAmountLowerPriced: boolean;
    }
  >;

  callStatic: {
    feeTo(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    twapSources(
      sourceName: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string] & { sourceAddress: string; curveAddress: string }
    >;

    volatilityTiers(
      sourceName: BytesLike,
      feeTier: BigNumberish,
      tickSpread: BigNumberish,
      twapLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, number, number, number, number, number, boolean] & {
        minAmountPerAuction: BigNumber;
        auctionLength: number;
        blockTime: number;
        syncFee: number;
        fillFee: number;
        minPositionWidth: number;
        minAmountLowerPriced: boolean;
      }
    >;
  };

  filters: {};

  estimateGas: {
    feeTo(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    twapSources(
      sourceName: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    volatilityTiers(
      sourceName: BytesLike,
      feeTier: BigNumberish,
      tickSpread: BigNumberish,
      twapLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    feeTo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    twapSources(
      sourceName: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    volatilityTiers(
      sourceName: BytesLike,
      feeTier: BigNumberish,
      tickSpread: BigNumberish,
      twapLength: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
